diff --git a/configure.ac b/configure.ac
index 5f11f9cd..ff889ef7 100644
--- a/configure.ac
+++ b/configure.ac
@@ -216,7 +216,7 @@ AM_CONDITIONAL(BUILD_GUI,[test "x$have_webkit" = "xyes" -a "x$have_gtk" = "xyes"
 # build with guile2.2 when available and not disabled.
 AC_ARG_ENABLE([guile], AS_HELP_STRING([--disable-guile],[Disable guile]))
 AS_IF([test "x$enable_guile" != "xno"],[
-  PKG_CHECK_MODULES(guile_22, guile-2.2, [have_guile22=yes],[have_guile22=no])
+  PKG_CHECK_MODULES(GUILE22, guile-2.2, [have_guile22=yes],[have_guile22=no])
   # this is a bit hacky; GUILE_PKG
   AS_IF([test "x$have_guile22" = "xyes"],[
     GUILE_PKG([2.2])
@@ -224,10 +224,11 @@ AS_IF([test "x$enable_guile" != "xno"],[
     GUILE_FLAGS
     AC_DEFINE_UNQUOTED([GUILE_BINARY],"$GUILE",[guile binary])
     AC_DEFINE(BUILD_GUILE,[1], [Do we support Guile?])
+    AC_SUBST(GUILE_SNARF, [guile-snarf])
+    guile_version=$($PKG_CONFIG guile-2.2 --modversion)
   ])
 ])
-AM_CONDITIONAL(BUILD_GUILE,
-[ test -n "$GUILE_EFFECTIVE_VERSION" -a -n "$GUILE_SNARF"])
+AM_CONDITIONAL(BUILD_GUILE,[test "x$have_guile22" = "xyes"])
 ###############################################################################
 
 ###############################################################################
@@ -298,7 +299,7 @@ echo "Webkit2/GTK+ version                 : $webkit_version"
 ])
 
 AM_COND_IF([BUILD_GUILE],[
-echo "Guile version                        : $GUILE_EFFECTIVE_VERSION"
+echo "Guile version                        : $guile_version"
 ])
 
 if test "x$build_mu4e" = "xyes"; then
diff --git a/guile/Makefile.am b/guile/Makefile.am
index c95f9b15..08c495c0 100644
--- a/guile/Makefile.am
+++ b/guile/Makefile.am
@@ -47,7 +47,8 @@ libguile_mu_la_LIBADD=					\
 libguile_mu_la_LDFLAGS= 				\
 	$(ASAN_LDFLAGS)					\
 	-shared						\
-	-export-dynamic
+	-export-dynamic					\
+	-Wl,-z,muldefs
 
 XFILES=							\
 	mu-guile.x					\
diff --git a/guile/mu-guile.c b/guile/mu-guile.c
index 982c38ea..59f243a4 100644
--- a/guile/mu-guile.c
+++ b/guile/mu-guile.c
@@ -1,5 +1,5 @@
 /*
-** Copyright (C) 2011-2013 Dirk-Jan C. Binnema <djcb@djcbsoftware.nl>
+** Copyright (C) 2011-2020 Dirk-Jan C. Binnema <djcb@djcbsoftware.nl>
 **
 ** This program is free software; you can redistribute it and/or modify it
 ** under the terms of the GNU General Public License as published by the
@@ -17,14 +17,15 @@
 **
 */
 
-#if HAVE_CONFIG_H
 #include <config.h>
-#endif /*HAVE_CONFIG_H*/
-
 #include <locale.h>
 
 #include <glib-object.h>
+
+#pragma GCC diagnostic push
+#pragma GCC diagnostic ignored "-Wredundant-decls"
 #include <libguile.h>
+#pragma GCC diagnostic pop
 
 #include <mu-runtime.h>
 #include <mu-query.h>
diff --git a/guile/tests/Makefile.am b/guile/tests/Makefile.am
index e65d1f5b..8df87fbb 100644
--- a/guile/tests/Makefile.am
+++ b/guile/tests/Makefile.am
@@ -19,12 +19,11 @@ include $(top_srcdir)/gtest.mk
 AM_CPPFLAGS=$(XAPIAN_CXXFLAGS)						\
 	 $(GMIME_CFLAGS)						\
 	 $(GLIB_CFLAGS)							\
-	-I ${top_srcdir}						\
-	-I ${top_srcdir}/lib						\
-	-I ${top_srcdir}/lib/tests					\
-	-DMU_TESTMAILDIR=\"${top_srcdir}/lib/tests/testdir\"		\
-	-DMU_TESTMAILDIR2=\"${top_srcdir}/lib/tests/testdir2\"		\
-	-DMU_TESTMAILDIR3=\"${top_srcdir}/lib/tests/testdir3\"		\
+	-I${top_srcdir}							\
+	-I${top_srcdir}/lib						\
+	-DMU_TESTMAILDIR=\"${top_srcdir}/lib/testdir\"			\
+	-DMU_TESTMAILDIR2=\"${top_srcdir}/lib/testdir2\"		\
+	-DMU_TESTMAILDIR3=\"${top_srcdir}/lib/testdir3\"		\
 	-DMU_PROGRAM=\"${abs_top_builddir}/mu/mu\"			\
 	-DMU_GUILE_MODULE_PATH=\"${abs_top_srcdir}/guile/\"		\
 	-DMU_GUILE_LIBRARY_PATH=\"${abs_top_builddir}/guile/.libs\"	\
@@ -42,7 +41,7 @@ noinst_PROGRAMS= $(TEST_PROGS)
 
 TEST_PROGS += test-mu-guile
 test_mu_guile_SOURCES= test-mu-guile.c dummy.cc
-test_mu_guile_LDADD=${top_builddir}/lib/tests/libtestmucommon.la
+test_mu_guile_LDADD=${top_builddir}/lib/libtestmucommon.la
 
 # we need to use dummy.cc to enforce c++ linking...
 BUILT_SOURCES=								\
diff --git a/guile/tests/test-mu-guile.c b/guile/tests/test-mu-guile.c
index 987e9c6d..50199eb8 100644
--- a/guile/tests/test-mu-guile.c
+++ b/guile/tests/test-mu-guile.c
@@ -1,6 +1,5 @@
-/* -*- mode: c; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
-**
-** Copyright (C) 2012-2013 Dirk-Jan C. Binnema <djcb@djcbsoftware.nl>
+/*
+** Copyright (C) 2012-2020 Dirk-Jan C. Binnema <djcb@djcbsoftware.nl>
 **
 ** This program is free software; you can redistribute it and/or modify it
 ** under the terms of the GNU General Public License as published by the
@@ -25,14 +24,13 @@
 #include <glib.h>
 #include <glib/gstdio.h>
 
-#include "../mu-query.h"
-
+#include <lib/mu-query.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <string.h>
 
 #include "test-mu-common.h"
-#include "mu-store.hh"
+#include <lib/mu-store.hh>
 
 
 /* tests for the command line interface, uses testdir2 */
@@ -44,10 +42,13 @@ fill_database (void)
 	GError *err;
 
 	tmpdir = test_mu_common_get_random_tmpdir();
-	cmdline = g_strdup_printf ("%s index --muhome=%s --maildir=%s"
-				   " --quiet",
-				   MU_PROGRAM,
-				   tmpdir, MU_TESTMAILDIR2);
+	cmdline = g_strdup_printf (
+		"/bin/sh -c '"
+		"%s init  --muhome=%s --maildir=%s --quiet; "
+		"%s index --muhome=%s  --quiet'",
+		MU_PROGRAM,  tmpdir, MU_TESTMAILDIR2,
+		MU_PROGRAM,  tmpdir);
+
 	if (g_test_verbose())
 		g_print ("%s\n", cmdline);
 
diff --git a/mu4e/mu4e-utils.el b/mu4e/mu4e-utils.el
index 3c056f6d..4c6ab70e 100644
--- a/mu4e/mu4e-utils.el
+++ b/mu4e/mu4e-utils.el
@@ -357,35 +357,35 @@ the list of maildirs will not change until you restart mu4e."
   mu4e-maildir-list)
 
 (defun mu4e-ask-maildir (prompt)
-  "Ask the user for a shortcut (using PROMPT) as defined in
-`mu4e-maildir-shortcuts', then return the corresponding folder
+  "Ask the user for a shortcut (using PROMPT) as per
+(mu4e-maildir-shortcuts), then return the corresponding folder
 name. If the special shortcut 'o' (for _o_ther) is used, or if
-`mu4e-maildir-shortcuts' is not defined, let user choose from all
-maildirs under `mu4e-maildir'."
+`(mu4e-maildir-shortcuts)' evaluates to nil, let user choose from
+all maildirs under `mu4e-maildir'."
   (let ((prompt (mu4e-format "%s" prompt)))
-    (if (not mu4e-maildir-shortcuts)
+    (if (not (mu4e-maildir-shortcuts))
         (funcall mu4e-completing-read-function prompt (mu4e-get-maildirs))
-      (let* ((mlist (append mu4e-maildir-shortcuts '(("ther" . ?o))))
+      (let* ((mlist (append (mu4e-maildir-shortcuts)
+                            '((:maildir "ther"  :key ?o))))
              (fnames
               (mapconcat
                (lambda (item)
                  (concat
                   "["
-                  (propertize (make-string 1 (cdr item))
+                  (propertize (make-string 1 (plist-get item :key))
                               'face 'mu4e-highlight-face)
                   "]"
-                  (car item)))
+                  (plist-get item :maildir)))
                mlist ", "))
              (kar (read-char (concat prompt fnames))))
         (if (member kar '(?/ ?o)) ;; user chose 'other'?
             (funcall mu4e-completing-read-function prompt
                      (mu4e-get-maildirs) nil nil "/")
-          (or (car-safe
-               (cl-find-if (lambda (item) (= kar (cdr item)))
-                           mu4e-maildir-shortcuts))
+          (or (plist-get
+               (cl-find-if (lambda (item) (= kar (plist-get item :key)))
+                           (mu4e-maildir-shortcuts)) :maildir)
               (mu4e-warn "Unknown shortcut '%c'" kar)))))))
 
-
 (defun mu4e-ask-maildir-check-exists (prompt)
   "Like `mu4e-ask-maildir', but check for existence of the maildir,
 and offer to create it if it does not exist yet."
@@ -398,20 +398,7 @@ and offer to create it if it does not exist yet."
     mdir))
 
 ;;; Bookmarks
-
-(defun mu4e-bookmarks ()
-  "Get `mu4e-bookmarks' in the (new) format, converting from the
-old format if needed."
-  (cl-map 'list
-          (lambda (item)
-            (if (and (listp item) (= (length item) 3))
-                `(:name  ,(nth 1 item)
-                         :query ,(nth 0 item)
-                         :key   ,(nth 2 item))
-              item))
-          mu4e-bookmarks))
-
-(defun mu4e-ask-bookmark (prompt)
+ (defun mu4e-ask-bookmark (prompt)
   "Ask the user for a bookmark (using PROMPT) as defined in
 `mu4e-bookmarks', then return the corresponding query."
   (unless (mu4e-bookmarks) (mu4e-error "No bookmarks defined"))
@@ -697,8 +684,9 @@ This is used by the completion function in mu4e-compose."
              (if (functionp mu4e-contact-process-function)
                  (funcall mu4e-contact-process-function (car contact))
                (car contact))))
-        (when address
-          (puthash address (cdr contact) mu4e~contacts))))
+        (when address ;; note the explicit deccode; the strings we get are  utf-8,
+          ;; but emacs doesn't know yet.
+          (puthash (decode-coding-string address 'utf-8) (cdr contact) mu4e~contacts))))
 
     (setq mu4e~contacts-tstamp (or tstamp "0"))
 
diff --git a/mu4e/mu4e-vars.el b/mu4e/mu4e-vars.el
index f388e636..cc5252a1 100644
--- a/mu4e/mu4e-vars.el
+++ b/mu4e/mu4e-vars.el
@@ -233,6 +233,20 @@ bookmarks depend on that, the results may differ."
   :type '(repeat (plist))
   :group 'mu4e)
 
+
+(defun mu4e-bookmarks ()
+  "Get `mu4e-bookmarks' in the (new) format, converting from the
+old format if needed."
+  (cl-map 'list
+          (lambda (item)
+            (if (and (listp item) (= (length item) 3))
+                `(:name  ,(nth 1 item)
+                         :query ,(nth 0 item)
+                         :key   ,(nth 2 item))
+              item))
+          mu4e-bookmarks))
+
+
 (defcustom mu4e-split-view 'horizontal
   "How to show messages / headers.
 A symbol which is either:
@@ -527,20 +541,43 @@ nil otherwise."
   "A list of maildir shortcuts.
 This makes it possible to quickly go to a particular
 maildir (folder), or quickly moving messages to them (e.g., for
-archiving or refiling). The list contains elements of the
-form (maildir . shortcut), where MAILDIR is a maildir (such as
-\"/archive/\"), and shortcut is a single character.
+archiving or refiling).
+
+Each of the list elements is a plist with at least:
+`:maildir'  - the maildir for the shortcut (e.g. \"/archive\")
+`:key'      - the shortcut key.
+
+Optionally, you can add the following:
+`:hide'  - if t, maildir is hdden from the main-view and speedbar.
+`:hide-unread' - do not show the counts of unread/total number
+ of messages for the maildir in the main-view.
+
+For backward compatibility, an older form is recognized as well:
+
+   (maildir . key), where MAILDIR is a maildir (such as
+\"/archive/\"), and key is a single character.
 
 You can use these shortcuts in the headers and view buffers, for
 example with `mu4e-mark-for-move-quick' (or 'm', by default) or
 `mu4e-jump-to-maildir' (or 'j', by default), followed by the
 designated shortcut character for the maildir.
 
-Unlike in search queries, folder names with spaces in them must NOT
-be quoted, since mu4e does this automatically for you."
+Unlike in search queries, folder names with spaces in them must
+NOT be quoted, since mu4e does this for you."
   :type '(repeat (cons (string :tag "Maildir") character))
   :group 'mu4e-folders)
 
+
+(defun mu4e-maildir-shortcuts ()
+  "Get `mu4e-maildir-shortcuts' in the (new) format, converting
+from the old format if needed."
+  (cl-map 'list
+          (lambda (item) ;; convert from old format?
+            (if (and (consp item) (not (consp (cdr item))))
+                `(:maildir  ,(car item) :key ,(cdr item))
+              item))
+          mu4e-maildir-shortcuts))
+
 (defcustom mu4e-display-update-status-in-modeline nil
   "Non-nil value will display the update status in the modeline."
   :group 'mu4e
diff --git a/mu4e/mu4e.texi b/mu4e/mu4e.texi
index 9fe7b555..5632159e 100644
--- a/mu4e/mu4e.texi
+++ b/mu4e/mu4e.texi
@@ -2106,16 +2106,17 @@ You can search for maildirs like any other message property
 (e.g. with a query like @t{maildir:/myfolder}), but since it is so common,
 @t{mu4e} offers a shortcut for this.
 
-For this to work, you need to set the variable @code{mu4e-maildir-shortcuts}
-to the list of maildirs you want to have quick access to, for example:
+For this to work, you need to set the variable
+@code{mu4e-maildir-shortcuts} to the list of maildirs you want to have
+quick access to, for example:
 
 @lisp
 (setq mu4e-maildir-shortcuts
-  '( ("/inbox"     . ?i)
-     ("/archive"   . ?a)
-     ("/lists"     . ?l)
-     ("/work"      . ?w)
-     ("/sent"      . ?s)))
+  '( (:maildir "/inbox"     :key  ?i)
+     (:maildir "/archive"   :key  ?a)
+     (:maildir "/lists"     :key  ?l)
+     (:maildir "/work"      :key  ?w)
+     (:maildir "/sent"      :key  ?s)))
 @end lisp
 
 This sets @key{i} as a shortcut for the @t{/inbox} folder --- effectively a
@@ -3573,10 +3574,10 @@ customize.
 
 ;; the maildirs you use frequently; access them with 'j' ('jump')
 (setq   mu4e-maildir-shortcuts
-    '(("/archive"     . ?a)
-      ("/inbox"       . ?i)
-      ("/work"        . ?w)
-      ("/sent"        . ?s)))
+    '((:maildir "/archive" :key ?a)
+      (:maildir "/inbox"   :key ?i)
+      (:maildir "/work"    :key ?w)
+      (:maildir "/sent"    :key ?s)))
 
 ;; a  list of user's e-mail addresses
 (setq mu4e-user-mail-address-list '("foo@@bar.example.com" "cuux@@example.com")
@@ -3747,10 +3748,10 @@ Next step: let's make a @t{mu4e} configuration for this:
 ;; the 'All Mail' folder by pressing ``ma''.
 
 (setq mu4e-maildir-shortcuts
-    '( ("/INBOX"               . ?i)
-       ("/[Gmail].Sent Mail"   . ?s)
-       ("/[Gmail].Trash"       . ?t)
-       ("/[Gmail].All Mail"    . ?a)))
+    '( (:maildir "/INBOX"              :key ?i)
+       (:maildir "/[Gmail].Sent Mail"  :key ?s)
+       (:maildir "/[Gmail].Trash"      :key ?t)
+       (:maildir "/[Gmail].All Mail"   :key ?a)))
 
 ;; allow for updating mail using 'U' in the main view:
 (setq mu4e-get-mail-command "offlineimap")
@@ -3976,6 +3977,39 @@ few related queries on the mailing-list; worthwhile to check out.
 @node Reading messages
 @section Reading messages
 
+@subsection Opening messages is slower than expected - why?
+@t{mu4e} is designed to be very fast, even with large amounts of mail.
+However, if you experience slowdowns, here are some things to consider:
+@itemize
+@item opening messages while indexing:
+@t{mu4e} corresponds with the @t{mu} server synchronously; this means
+that you can do only one thing at a time. The one operation that can
+take a bit of time is retrieving/indexing of mail, during which you
+have to wait for messages to open. For some strategies to reduce that
+time, see the next question.
+@item getting contact information can take some time:
+especially when opening @t{mu4e} the first time and you have a
+@emph{lot} of contacts, it can take a few seconds to process those.
+Note that @t{mu4e} 1.3 and higher only get @emph{changed} contacts in
+subsequent updates (after and indexing operation), so this should be
+less of a concern.
+@item decryption / sign verification:
+encrypted / signed messages sometimes require network access, and this
+may take a while; certainly if the needed servers cannot be found.
+Part of this may be that influential environment variables are not set
+in the emacs environment.
+@end itemize
+
+If you still see unexpect slowness you can of course file a ticket,
+but please be sure to mention the following:
+
+@itemize
+@item are all messages slow or only some messages?
+@item if it's only some messages, is there something specific about them?
+@item in addition, please a (sufficiently censored version of) a message that is slow
+@item is opening @emph{always} slow or only sometimes? When?
+@end itemize
+
 @subsection How can I view attached images in my message view buffers? See
 @ref{Viewing images inline}.
 @subsection How can I word-wrap long lines in when viewing a message?
