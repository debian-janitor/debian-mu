This is mu4e.info, produced by makeinfo version 4.13 from mu4e.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* mu4e: (mu4e).        An email client for emacs based on mu.
END-INFO-DIR-ENTRY
   Copyright (C) 2012 Dirk-Jan C. Binnema

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License."


File: mu4e.info,  Node: Top,  Next: Introduction,  Up: (dir)

mu4e Manual
***********

Welcome to mu4e!

   mu4e (mu-for-emacs) is an e-mail client for GNU-Emacs, version 23 and
later, built on top of the mu e-mail search engine. mu4e is optimized
for fast handling of large amounts of e-mail.

   Some of the features include:

   * Fully search-based: there are no folders, only queries

   * Fully documented, with example configurations

   * UI optimized for speed with quick key strokes for common actions

   * Asynchronous: heavy actions never block emacs

   * Rich-text e-mails using org-mode (experimental)

   * Address auto-completion based on your messages - no need for
     managing address books

   * Extendable using your own custom actions

   This manual goes through the installation of mu4e, discusses the
basic configuration, and explains its daily use. It also shows how you
can customize mu4e for your needs. At the end of the manual, there are
some example configurations, which should help you to get up to speed
quickly.

   Also note the *Note FAQ - Frequently Anticipated Questions::, and
the section on *Note Known issues / missing features::, which may save
you some time.

   This manual has been updated for mu/mu4e version _{No value for
`mu4e-version'}_.

* Menu:

* Introduction:: How it all began
* Getting started:: Setting things up
* Running mu4e:: Daily use
* Searching:: Some more background on searching/queries
* Marking:: Marking messages and performing actions
* Actions:: Defining and using custom actions
* Interaction with other tools:: mu4e and the rest of the world
* Example configuration:: Some examples to set you up quickly
* FAQ - Frequently Anticipated Questions:: Common questions and answers
* Known issues / missing features:: mu4e is not perfect yet

Appendices
* How it works:: Some notes about the implementation of mu4e
* Logging and debugging:: How to debug problems in mu4e
* GNU Free Documentation License::  The license of this manual


File: mu4e.info,  Node: Introduction,  Next: Getting started,  Prev: Top,  Up: Top

1 Introduction
**************

Welcome to mu4e!

* Menu:

* Why another e-mail client?::
* Other mail clients::
* What mu4e does not do::


File: mu4e.info,  Node: Why another e-mail client?,  Next: Other mail clients,  Up: Introduction

1.1 Why another e-mail client?
==============================

Fair question.

   I'm not sure the world _needs_ yet another e-mail client, but perhaps
_I_ do! I (the author) spend a _lot_ of time, professionally and
privately, dealing with e-mail messdae and therefore, having an
efficient e-mail client is essential for me. Since none of the existing
ones worked the way I wanted, I created my own.

   As emacs is such an integral part of my workflow, it made a lot of
sense to integrate my e-mail client with it. And as I already had
written an e-mail search engine (mu), it seemed only logical to use
that as a basis.

   Even though I created mu4e for such selfish reasons, mu4e tries hard
to be as useful as possible for _all_ its users - suggestions are very
welcome and many have already made it to mu4e.


File: mu4e.info,  Node: Other mail clients,  Next: What mu4e does not do,  Prev: Why another e-mail client?,  Up: Introduction

1.2 Other mail clients
======================

Under the hood, mu4e is fully search-based, similar to programs like
notmuch(1), md(2) and sup(3). However, mu4e's user-interface is quite
different from those programs.

   mu4e's mail handling (deleting, moving etc.) is inspired by
_Wanderlust_(4) (another emacs-based e-mail client), mutt(5) and dired,
while it also takes some cues from _Gmail_.

   mu4e tries to keep all the 'state' in your maildirs, so you can
easily switch between clients, synchronize over IMAP, backup with rsync
and so on. If you delete the database, you won't lose any information.

   ---------- Footnotes ----------

   (1) `http://notmuchmail.org'

   (2) `https://github.com/nicferrier/md'

   (3) `http://sup.rubyforge.org/'

   (4) `http://www.gohome.org/wl/'

   (5) `http://www.mutt.org/'


File: mu4e.info,  Node: What mu4e does not do,  Prev: Other mail clients,  Up: Introduction

1.3 What mu4e does not do
=========================

mu and mu4e do _not_ deal with getting your e-mail messages from a mail
server. That task is delegated to other tools, such as offlineimap(1),
isync(2) or fetchmail(3). As long as the messages end up in a Maildir,
mu4e and mu are happy to deal with them.

   mu4e also does _not_ implement sending of messages; instead, it
depends on *note smtpmail: (smtpmail)Top, which is part of emacs. In
addition, mu4e piggybacks on Gnus' message editor; *note Gnus message
editor: (message)Top.

   Thus, many of the things an e-mail client traditionally needs to do,
are delegated to other tools. This leaves mu4e to concentrate on what
it does best: quickly finding the mails you are looking for, and handle
them as efficiently as possible.

   ---------- Footnotes ----------

   (1) `http://offlineimap.org/'

   (2) `http://isync.sourceforge.net/'

   (3) `http://www.fetchmail.info/'


File: mu4e.info,  Node: Getting started,  Next: Running mu4e,  Prev: Introduction,  Up: Top

2 Getting started
*****************

In this chapter, we go through the installation of mu4e and show how you
can set it up. After we have succeeded in *note Getting mail::, and
*note Indexing your messages::, we discuss *note Basic configuration::.

   After these steps, mu4e should be ready to go.

* Menu:

* Installation::
* Getting mail::
* Indexing your messages::
* Basic configuration::
* Folders::
* Sending mail::


File: mu4e.info,  Node: Installation,  Next: Getting mail,  Up: Getting started

2.1 Installation
================

mu4e is part of mu - by installing the latter, the former will be
installed as well. Note, some distributions provide packed versions of
mu/mu4e; if you can use those, there's no need to compile anything
yourself. However, if there are no packages for your distribution, or
if you want to use the latest development versions, you can follow the
steps below.

   First, you need make sure you have the necessary dependencies. On a
Debian or Ubuntu system, you can get these with:

     sudo apt-get install libgmime-2.4-dev libxapian-dev
     # emacs if you don't have it yet, mu4e works with GNU-Emacs 23 and 24
     # emacs 24 works better; it may be available as 'emacs-snapshot'
     sudo apt-get install emacs23
     # optional
     sudo apt-get install guile-2.0-dev html2text xdg-utils
     # optional: only needed for msg2pdf
     sudo apt-get install libwebkit-dev

   Using a release-tarball (as avaiable from GoogleCode(1),
Installation follows the normal sequence:

     $ tar xvfz mu-<version>.tar.gz  # use the specific version
     $ cd mu-<version>
     $./configure && make
     $ sudo make install

   Alternatively, if you build from the git repository, or use a
tarball like the ones that github produces, the instructions are
slightly different (and require you to have autotools installed):

     # get from git, or from a github tarball
     $ cd mu-<version>
     $ autoreconf -i && ./configure && make
     $ sudo make install

   After this, mu and mu4e should be installed (2), and be available
from the command line and emacs (respectively).

   You may need to restart emacs.

2.1.1 mu4e and emacs customization
----------------------------------

There is _experimental_ support for using the emacs customization
system in mu4e, but for now, we recommend setting the values manually.
Please refer to *Note Example configuration:: for a couple of examples
of this.

   ---------- Footnotes ----------

   (1) `http://code.google.com/p/mu0/downloads/list'

   (2) there's a hard dependency between versions of mu4e and mu - you
cannot combine different versions


File: mu4e.info,  Node: Getting mail,  Next: Indexing your messages,  Prev: Installation,  Up: Getting started

2.2 Getting mail
================

In order for mu (and, by extension, mu4e) to work, you need to have
your e-mail messages stored in a Maildir. If you are already using
Maildirs, you are lucky; otherwise, you will need to get your mail
there in some way.

   If you are using some external IMAP or POP server, you can use tools
like getmail, fetchmail offlineimap or isync to download your message
into a maildir-directory (`~/Maildir', usually). If you are using a
local mail-server (such as _Postfix_ or qmail), you can teach them to
deliver into a maildir as well, maybe in combination with procmail. A
bit of googling should be able to provide you with the details; also
there is full example of setting mu4e up with offlineimap and Gmail;
*note Gmail configuration::.

   You can do all of the mail retrieval _outside_ of emacs/mu4e, but
you can also do it from within mu4e. For that, set the variable
`mu4e-get-mail-command' to the program or shell command you want to use
for retrieving mail. You can then retrieve your e-mail from the *note
Main view::.

   You can also have this command run periodically in the background,
by setting the variable `mu4e-update-interval' to the number of seconds
between these updates. If set to `nil', it will not update at all. If
you make changes to `mu4e-update-interval', `mu4e' must be restarted
before the change will take effect.


File: mu4e.info,  Node: Indexing your messages,  Next: Basic configuration,  Prev: Getting mail,  Up: Getting started

2.3 Indexing your messages
==========================

After you have succeeded in *note Getting mail::, we need to _index_ the
messages. That is - we need to scan the Maildir and store the
information about the mails into a special database. We can do that
from `mu4e' - *note Main view::, but the first time, it is a good idea
to run it from the command line, as it is easier to recognize potential
problems.

   Assuming that your Maildir is at `~/Maildir', you should give the
following command:
       $ mu index --maildir=~/Maildir

   This should scan your `~/Maildir'(1) and fill the database, and give
progress information while doing so.

   The indexing process may take a few minutes the first time you do it
(for thousands of e-mails); afterwards it is much faster, since mu only
has to scan the differences. Indexing is discussed in more detail in
the mu-index man page.

   After the indexing process has finished, you can quickly test if
everything worked, by trying some command line searches, for example

       $ mu find hello

   which should list all messages that match hello. For more examples of
searches *Note Queries::, or check the mu-find and mu-easy man pages.

   If all of this worked well, we are well on our way setting up mu4e;
the next step is to do some basic configuration.

   ---------- Footnotes ----------

   (1) In most cases, you do not even need to provide the
-maildir=~/Maildir; see the mu-index man-page for details


File: mu4e.info,  Node: Basic configuration,  Next: Folders,  Prev: Indexing your messages,  Up: Getting started

2.4 Basic configuration
=======================

The first thing we need to do before we can start using mu4e is to tell
emacs to load mu4e, and tell mu4e where it can find specific maildir
folders.

   So, add to your `~/.emacs' (or equivalent) something like:

     (require 'mu4e)


File: mu4e.info,  Node: Folders,  Next: Sending mail,  Prev: Basic configuration,  Up: Getting started

2.5 Folders
===========

The next step is to tell mu4e where it can find your Maildir, and some
special folders. So, for example:
       (setq
         mu4e-maildir       "~/Maildir"   ;; top-level Maildir
         mu4e-sent-folder   "/sent"       ;; where do i keep sent mail?
         mu4e-drafts-folder "/drafts"     ;; where do i keep half-written mail?
         mu4e-trash-folder  "/trash")     ;; where do i move deleted mail?

   `mu4e-maildir' takes an actual filesystem-path, the other folder
names are all relative to `mu4e-maildir'. The next step is telling mu4e
how we want to send mail.


File: mu4e.info,  Node: Sending mail,  Prev: Folders,  Up: Getting started

2.6 Sending mail
================

mu4e re-uses Gnu's *note (message)Top:: for writing mail and inherits
the setup for _sending_ mail from that.

   For sending mail using SMTP, mu4e uses *note (smtpmail)Top::. This
package support many different ways to send mail, please refer to its
documentation for the details.

   Here, we only provide some simple examples - for more, *note Example
configuration::.

   A very minimal setup could look something like:

     ;; tell message-mode how to send mail
     (setq message-send-mail-function 'smtpmail-send-it)
     ;; if our mail server lives at smtp.example.org; if you have a local
     ;; mail-server, simply use 'localhost' here.
     (setq smtpmail-smtp-server "smtp.example.org")

   Since mu4e uses the same message mode and smtpmail that Gnus uses,
many settings for those will also apply to mu4e.

   By default, mu4e puts a copy of any messages you sent in the folder
you set for `mu4e-sent-folder'. In some case, this may not be what you
want - for example, when using Gmail+IMAP (but _not_ with Gmail+POP3),
this interferes with Gmail's handling of the sent messages folder, and
you may end up with duplicate messages.

   Since mu4e 0.9.8.3, there is the variable
`mu4e-sent-messages-behavior' for, which takes a symbol. The default is
`'sent' which, as mentioned, causes the message to be copied to your
sent-messages folder. Other possible values are `'trash' (so the sent
message is copied to the trash-folder (`mu4e-trash-folder'), and
`'delete' to simply discard the message altogether.

   For Gmail-IMAP you could add the following to your settings:

;; don't save messages to Sent Messages, Gmail/IMAP will take care of this
(setq mu4e-sent-messages-behavior 'trash)

   And that's it! We should be ready to go now.


File: mu4e.info,  Node: Running mu4e,  Next: Searching,  Prev: Getting started,  Up: Top

3 Running mu4e
**************

After the following the steps in *note Getting started::, we should now
have a working mu4e setup. In this chapter, we'll give a tour of the
mu4e program, and show its use.

   mu4e consists of a number of views; the diagram shows how they
relate to each other, and the default key-bindings to get from one view
to the next. In the next sections we will describe what these keys
actually _do_.

* Menu:

* Main view:: This is where we start
* Headers view:: Lists of message headers
* Message view:: Viewing specific messages
* Editor view:: Creating / editing messages

     ----------------------------------------------------------------------------

             [C]     +--------+   [RFCE]
           --------> | editor | <--------
          /          +--------+          \
         /         [RFCE]^                \
        /                |                 \
     +-------+ [sjbB]+---------+  [RET] +---------+
     | main  | <---> | headers | <----> | message |
     +-------+  [q]  +---------+ [qbBjs]+---------+
                       [sjbB]                ^
                                         [.] | [q]
                                             V
                                           +-----+
                                           | raw |
                                           +-----+

     Default bindings
     ----------------
     R: Reply      s: search            .: raw view (toggle)
     F: Forward    j: jump-to-maildir   q: quit
     C: Compose    b: bookmark-search
     E: Edit       B: edit bookmark-search

     ----------------------------------------------------------------------------


File: mu4e.info,  Node: Main view,  Next: Headers view,  Up: Running mu4e

3.1 Main view
=============

After you have installed mu4e (*note Getting started::), you can start
it with `M-x mu4e'. mu4e wil do some checks to ensure everything is set
up correctly, and then show you the mu4e main view.

   This looks something like the following:

----------------------------------------------------------------------------
* mu4e - mu for emacs version x.x

  Basics

	* [j]ump to some maildir
	* enter a [s]earch query
	* [C]ompose a new message

  Bookmarks

	* [bu] Unread messages
	* [bt] Today's messages
	* [bw] Last 7 days
	* [bp] Messages with images
  Misc

	* [U]pdate email & database
	* toggle [m]ail sending mode (direct)
	* [f]lush queued mail

        * [A]bout mu4e
        * [H]elp
	* [q]uit mu4e
----------------------------------------------------------------------------

   Below, we assume the default key bindings here. If you've changed
those, well, _mutatis mutandis_.

3.1.1 Basic actions
-------------------

First, the _Basics_:
   * [j]ump to some maildir means that after pressing <j>, mu4e will
     ask you for a maildir to visit. These are the maildirs you set in
     *note Basic configuration::, or, if you choose <o> for _other_, all
     maildirs.

   * enter a [s]earch query means that after pressing <s> you will be
     asked for a search query, and after entering one, the results will
     be shown. *Note Searching::.

   * [C]ompose a new message means that after pressing <C>, you will be
     thrown in a message-editing buffer, where you can compose a new
     message.

3.1.2 Bookmarks
---------------

Next come _Bookmarks_. These are set with the variable
`mu4e-bookmarks'; what you see in the above example are the _default_
bookmarks - you can add your own and/or replace the default ones; *Note
Bookmarks::. In short, you can view the list of messages matching a
certain bookmark by pressing <b> followed by the shortcut for this
bookmark. If you'd like to edit the bookmarked query first, use <B>.

3.1.3 Miscellaneous
-------------------

Finally, there are some _Misc_ (miscellaneous) actions:
   * [U]pdate email & database will execute whatever is in the variable
     `mu4e-get-mail-command', and afterwards update the mu database;
     *note Indexing your messages::. See *note Getting mail:: for
     details.

   * toggle [m]ail sending mode (direct) will toggle between sending
     mail directly, and queuing it first (for example, when you are
     offline), and [f]lush queued mail will flush any queued mail. This
     item is visible only if you have actually set up mail-queuing.
     *note Queuing mail::.

   * [A]bout mu4e will give some general information about mu4e.

   * [H]elp will show help information for this view.

   * Finally, [q]uit mu4e will quit mu4e.


File: mu4e.info,  Node: Headers view,  Next: Message view,  Prev: Main view,  Up: Running mu4e

3.2 Headers view
================

The headers view shows the results of a search query. There is a line
for each matching message, showing information about it. It looks
something like the following:

----------------------------------------------------------------------------------
  Date              Flags  From/To             Subject
  2011-12-16 18:38  uN     To Edmund Dantès    + Re: Extension security?
  2011-12-16 21:44  uN     Abbé Busoni             + Re: Extension security?
  2011-12-17 03:14  uN     Pierre Morrel           + Re: Extension security?
  2011-12-17 04:04  uN     Jacopo                    + Re: Extension security?
  2011-12-17 14:36  uN     Mercédès                    + Re: Extension security?
  2011-12-18 06:05  uN     Beachamp                      \ Re: Extension security?
  2011-12-16 18:23  uN     Albert de Moncerf   + Re: [O] A presentation tool
  2011-12-17 01:53  usaN   Gaspard Caderousse    \ Re: [O] A presentation tool
  2011-12-16 16:31  uN     Baron Danglars      | [O] imaxima?
End of search results
----------------------------------------------------------------------------------

3.2.1 Some notes
----------------

Some notes to explain what you see in the example:

   * The fields shown in the headers view can be influenced by
     customizing the variable `mu4e-headers-fields'

   * Instead of showing the From: and To: fields separately, you can
     use From/To (:from-or-to in `mu4e-headers-fields' as a more
     compact way to convey the most important information: it shows
     From: _except_ when the e-mail was sent by the user (i.e., you) -
     in that case it shows To: (prefixed by To(1), as in the example
     above). To determine whether a message was sent by you, mu4e uses
     the variable `mu4e-user-mail-address-regexp', which should be a
     regular expression matching all the e-mail addresses that you use.

   * The letters in the 'Flags' field correspond to the following:
     D=draft, F=flagged, N=new, P=passed (i.e.., forwarded), R=replied,
     S=seen, T=trashed, a=has-attachment, x=encrypted, s=signed,
     u=unread.

   * You can change the date format by customizing the variable
     mu4e-headers-date-format

   * The subject field displays the discussion threads according to the
     _JWZ mail threading algorithm_(2).

3.2.2 Keybindings
-----------------

Using the default key bindings, you can do various things with these
messages; these actions are also listed in the Headers menu in the
Emacs menu bar.

key          description
===========================================================
n,p          go to next, previous message
y            select the message view (if it's visible)
RET          open the message at point in the message view

searching
---------
s            search
S            edit last query
/            narrow the search
b            search bookmark
B            edit bookmark before search
j            jump to maildir
M-left       previous query
M-right      next query

O            change sort order
P            toggle threading
Q            toggle full-search


marking
-------
d            mark for moving to the trash folder
DEL,D        mark for immediate deletion
m            mark for moving to another maildir folder
+,-          mark for flagging/unflagging
o,r          mark message as unread, read

u            unmark message at point
U            unmark *all* messages

%            mark based on a regular expression
T,t          mark whole thread, subthread

*            deferred mark (decide what to mark for later)
#            resolve deferred marks

x            execute actions for the marked messages

composition
-----------
R,F,C        reply/forward/compose
E            edit (only allowed for draft messages)


misc
----
a            execute some custom action on a header
|            pipe message through shell command
C-+,C--      increase / decrease the number of headers shown
H            get help
q,z          leave the headers buffer

3.2.3 Marking messages
----------------------

The mark/unmark commands support the current _region_ (i.e., selection)
- so, for example, if you the select ('mark' in emacs lingo) a number of
message (like you would select text in a buffer) and then press <DEL>,
all selected message will be marked for deletion.

   The two-step mark-execute sequence is similar to what dired and som
other emacs-based programs do. This way, mu4e tries to be as quick as
possible while avoiding accidents.

   You can mark all messages that match a certain pattern with <%>. In
addition, you can mark all messages in the current thread (<T>) or
sub-thread (<t>).

   When you try to do a new search, or refresh the headers buffer while
you still have marked messages, normally you will be asked what to do
with those marks - whether to _apply_ them before leaving, or _ignore_
them. This behavior can be influenced with the variable
`mu4e-headers-leave-behavior' - see its documentation.

   For more information about marking, *Note Marking::.

3.2.4 Sort order and threading
------------------------------

By default, mu4e sorts messages by date, in descending order: the most
recent messages are shown at the top. In addition, the messages are
_threaded_, i.e., shown in the context of a message thread; this also
affects the sort order.

   You can change the sort order with M-x mu4e-headers-change-sorting or
<O>, and you can toggle threading on/off using M-x
mu4e-headers-toggle-threading or <P>. For both of these functions,
unless you provide a prefix argument (<C-u>), the current search is
updated immediately using the new parameters. You can toggle full-search
(*note Searching::) using M-x mu4e-headers-toggle-full-search or <Q>.

   If you want to change the defaults for these settings, you can use
the variables `mu4e-headers-sortfield' and `mu4e-headers-show-threads'.

   Note that you can see the current settings in the emacs modeline; it
shows the current query, followed by the shortcut character for
sortfield (the same character you'd use in
`mu4e-headers-change-sorting'. The next character is either a (for
ascending, _A->Z_ order), or d (for descending, _Z->A_ order). If
threading is enabled, the next character is a T, and finally, if we're
doing an unlimited, full search, the last character is an F.

   To illustrate this, suppose our query is subject:foo maildir:/bar,
we're sorting by subject in ascending order with threads enabled, and
it's a full search. The corresponding mode-line string then is:
subject:foo maildir:/bar(saTF).

3.2.5 Actions
-------------

`mu4e-headers-action' (<a>) lets you pick custom actions to perform on
the message at point. You can specify these actions using the variable
`mu4e-headers-actions'. Refer to *note Actions:: for details.

   mu4e defines some default actions - one is capture - <a c> will
'capture' the current message. Next, when you're editing some message,
you can include the previously captured message as an attachment, using
`mu4e-compose-attach-captured-message'.

   The file `mu4e-actions.el' in the mu4e source distribution contains a
number of example actions.

3.2.6 Split view
----------------

Using the _Split view_, we can see the *note Headers view:: and the
*note Message view:: next to each other, with the message that is
selected in the former, visible in the latter.

   You can influence the way the splitting is done by customizing the
variable `mu4e-split-view' in your configuration to one of 3 values:
   * horizontal (this is the default): display the message view below
     the header view

   * vertical: display the message view on the right side of the header
     view

   * anything else: don't do any splitting

   When splitting horizontally, you can determine the number of visible
header lines with with the variable mu4e-headers-visible-lines (default
value: 8). When split vertically you can use
mu4e-headers-visible-columns (default value: 30) to set the number of
visible columns.

   When the message view window is selected, you cannot use the arrow
keys for moving to the next / previous message (like you can in the
headers view), since those are already assigned to cursor movement in
the message.  However, instead can use the <p> (or <M-up>) and <n> (or
<M-down>) keys for moving to the previous and the next message,
respectively. These keys also work in the headers view.

   You can change the selected window from the headers-view to the
message-view and vice-versa with `mu4e-select-other-view', bound to <y>.

   ---------- Footnotes ----------

   (1) You can customize this by changing the variable
`mu4e-headers-from-or-to-prefix' (a cons cell)

   (2) `http://www.jwz.org/doc/threading.html'


File: mu4e.info,  Node: Message view,  Next: Editor view,  Prev: Headers view,  Up: Running mu4e

3.3 Message view
================

After selecting a message in the *note Headers view::, it will be shown
in the message view, for example:

----------------------------------------------------------------------------
From: info@galatians.net
To: "Paul" paul@hotmail.com
Subject: Re: some thoughts
Flags: (seen attach)
Date: Mon 19 Jan 2004 09:39:42 AM EET
Maildir: /inbox
Attachments(2): [1]DSCN4961.JPG(1.3M), [2]DSCN4962.JPG(1.4M)

Hi Paul,

How are you? Sorry we didn't get back to you sooner and sorry for the
top-quoting. We're still debating your last message; anyway, here are some
recent pics. And here's a link: http://example.com[1]

All the best!

On Sun 21 Dec 2003 09:06:34 PM EET, Paul wrote:

[....]
----------------------------------------------------------------------------

   Some notes:
   * You can determine which header fields are shown by setting the
     variable `mu4e-view-fields'.

   * You can customize the date format by setting the variable
     `mu4e-date-format-long', using the same format that
     `format-time-string' uses.

   * If you only want to see the name and not the e-mail address of the
     contacts in address fields, you can set `mu4e-view-show-addresses'
     to nil. This will hide the addresses for contacts that also have a
     name. The e-mail address is still available as a tool-tip.

   * The body text can be line-wrapped (toggle between
     wrapped/not-wrapped with <w>) and/or cited parts can be hidden
     (toggle between hidden/not-hidden with <h>. If you want to do this
     by default when viewing messages, you can set, respectively,
     `mu4e-view-wrap-lines' and `mu4e-view-hide-cited' to `t'. (1)

   * For search-related operations, see *note Searching::.

3.3.1 Keybindings
-----------------

You can find most things you can do with this message in the _View_
menu, or by using the keyboard; the default bindings are:

key          description
==============================================================
n,p          go to next, previous message
y            select the headers view (if it's visible)

searching
---------
s            search
e            edit last query
/            narrow the search
b            search bookmark
B            edit bookmark before search
j            jump to maildir

M-left       previous query
M-right      next query

marking
-------
d            mark for moving to the trash folder
DEL,D        mark for immediate deletion
m            mark for moving to another maildir folder
+,-          mark for flagging/unflagging
o,r          mark message as unread, read

u            unmark message at point
U            unmark *all* messages

%            mark based on a regular expression
T,t          mark whole thread, subthread

SPC          deferred mark (decide what to mark for later)
*            resolve deferred marks

x            execute actions for the marked messages

composition
-----------
R,F,C        reply/forward/compose
E            edit (only allowed for draft messages)

actions
-------
g            go to (visit) numbered URL (using `browse-url')
             (or: <mouse-2> or RET with point on url)
e            extract (save) attachment (asks for number)
             (or: <mouse-2> or RET with point on attachment)
             C-u e will extract multiple attachments
o            open attachment (asks for number)
             (or: <S-mouse-2> or S-RET with point on attachment)

a            execute some custom action on the message
A            execute some custom action on an attachment

misc
----
w            toggle line wrapping
h            toggle showing cited parts

.            show the raw message view. 'q' takes you back.
C-+,C--      increase / decrease the number of headers shown
H            get help
q,z          leave the message view

   For the marking commands, please refer to *note Marking messages::.

3.3.2 Opening and saving attachments
------------------------------------

By default, when opening attachments, mu4e uses the the
xdg-open-program (2) or (on MacOS) the open program. If you want to use
another program, you can specify this by setting the MU_PLAY_PROGRAM
environment variable.

   When extracting (saving) attachments (with <e>), the default
directory for saving them is your home directory (`~/'); you can change
this using the variable `mu4e-attachment-dir', for example:

     (setq mu4e-attachment-dir (file-name-expand "~/Downloads"))

   If you want to extract multiple attachments at once, you can do so by
prefixing the extracting command by <C-u>; so <C-u e> will ask you for
a range of attachments to extract (for example, 1 3-6 8). Range a is a
shortcut for _all_ attachments.

3.3.3 Viewing images inline
---------------------------

It is possible to show images inline in the message view buffer if you
run emacs in GUI-mode. You can enable this by setting the variable
`mu4e-view-show-images' to t.

   Since emacs does not always handle images correctly, this is not
enabled by default. Note, if you are using a (pre-) release of emacs 24
and build it yourself, you probable want to build it with _Imagemagick_
support - in that case, also make sure you call
`imagemagick-register-types' in your configuration, so it is used for
images.

     ;; enable inline images
     (setq mu4e-view-show-images t)
     ;; use imagemagick, if available
     (when (fboundp 'imagemagick-register-types)
        (imagemagick-register-types))

3.3.4 Actions
-------------

`mu4e-view-action' (<a>) lets you pick some custom action to perform on
the current message. You can specify these actions using the variable
`mu4e-view-actions'.

   Similarly, there is `mu4e-view-attachment-action' (<A>) for actions
on attachments, which you can specify with
`mu4e-view-attachment-actions'.

   By default, mu4e already offers a few useful actions for attachments:

   * open-with (<w>): open the attachment with some arbitrary program.
     For example, suppose you have received a message with a picture
     attachment; then, A w 1 RET gimp RET will open that attachment in
     The Gimp.

   * pipe (<|>: process the attachment with some Unix shell-pipe and
     see the results. Suppose you receive a patch file, and would like
     to get an overview of the changes, using the diffstat program. You
     can use something like: A | 1 RET diffstat -b RET.

   * emacs (<e>): open the attachment in your running emacs. For
     example, if you receive some text file you'd like to open in emacs:
     A e 1 RET.

   These actions all work on a _temporary copy_ of the attachment.

   For more information on setting up actions and how to define them,
see *note Actions::.

3.3.5 Displaying rich-text messages
-----------------------------------

For displaying messages, mu4e normally prefers the plain-text version
for messages consisting of both a plain-text and an html (rich-text)
version of its body-text.

   If there is only an html-version, or if the plain-text version is
too short in comparison with the html part, mu4e tries to convert the
html into plain-text for display. The default way to do that is to use
the Emacs built-in `html2text' function, but if you set the variable
`mu4e-html2text-command' to some external program, that program will be
used. This program is expected to take html from standard input and
write plain text in utf-8 encoding on standard output.

   An obvious choice for this is the program that is actually _called_
html2text(3), which you could set up with something like the following
in your initialization files:

     (setq mu4e-html2text-command "html2text -utf8 -width 72")

   An alternative to this is to use the Python python-html2text package;
after installing that, you can tell mu4e to use it with something like:

     (setq mu4e-html2text-command "html2markdown | grep -v '&nbsp_place_holder;'")

   As mentioned, by default mu4e prefers the text-version of an e-mail
message over the html version. You can change this by setting
`mu4e-view-prefer-html' to t.

   ---------- Footnotes ----------

   (1) If you have installed the filladapt package
(`http://www.wonderworks.com/download/filladapt.el'), mu4e will use it
for line-wrapping, as it generally does a better job than the default
mechanism emacs provides.

   (2) `http://portland.freedesktop.org/wiki/'

   (3) `http://www.mbayer.de/html2text/'


File: mu4e.info,  Node: Editor view,  Prev: Message view,  Up: Running mu4e

3.4 Editor view
===============

For its editor, mu4e re-uses Gnu's message-mode. For example, when
replying to a message, the editor view looks something like the
following:

----------------------------------------------------------------------------
From: Rupert the Monkey <rupert@example.com>
Reply-To: rupert@example.com
To: Wally the Walrus <wally@example.com>
In-reply-to: <201201160918.47080.ssdfz@example.com>
Subject: Re: Eau-qui d'eau qui?
--text follows this line--

On Mon 16 Jan 2012 10:18:47 AM EET, Wally the Walrus wrote:

 > Hi Rupert,
 >
 > Dude - how are things?
 >
 > Later -- wally.
----------------------------------------------------------------------------

   Since mu4e uses gnu's message editor, for documentation *note
()Message::. Also, *note Sending mail::. There are many key-bindings
available, here are some of the essential ones (you can use the menu to
find more):

3.4.1 Some useful keybindings
-----------------------------

key          description
---          -----------
C-c C-c      send message
C-c C-d      save to drafts and leave
C-c C-k      kill the message
C-c C-a      attach a file (pro-tip: drag & drop works as well)

If you want use mu4e as the default program for sending mail, please see
*note Setting the default emacs mail program::. With respect to sending
mail, other interesting topics: *note Citations with mu-cite:: and
*note Maintaining an address-book with org-contacts::.

   Normally, mu4e will _bury_ the message buffer after sending; if you
want to kill the buffer instead, add something like the following to
your configuration:

     (setq message-kill-buffer-on-exit t)

3.4.2 Address autocompletion
----------------------------

Since mu/mu4e version 0.9.8.5, there is support for autocompleting
addresses using <TAB> when composing e-mail messages. As the source for
the addresses to complete, mu4e uses the e-mail addresses in its
database - addresses you sent messages to or received messages from.
_Note:_ auto-completion should work with emacs versions 23.2 and later.

   Address auto-completion is enabled by default, using the variable
mu4e-compose-complete-addresses.

3.4.3 Limiting the number of addresses for autocompletion
---------------------------------------------------------

If you have a lot of mail, especially from mailing lists and the like,
there will be _many_ e-mail adresses, most of which are unlikely to be
useful when auto-completing. For example, consider e-mail addresses in
five year old mailing lists posts.

   So, mu4e attempts to limit the number of e-mail addresses in the
completion pool by filter the ones that are most likely to be relevant.
The following variables are available to tune this:

   * `mu4e-compose-complete-only-personal' - when set to t, only
     consider addresses that were seen in _personal_ messages - that is,
     messages in which one of my e-mail addresses was seen in one of
     the address fields. This is to exclude mailing list posts. You can
     define what is considered 'my e-mail address' using
     `mu4e-my-email-addresses', a list of e-mail address (defaults to
     (user-mail-address)), and when indexing from the command line, the
     -my-address parameter for mu index.

   * `mu4e-compose-complete-only-after' - only consider e-mail
     addresses seen after some date. Parameter is a string, parseable by
     `org-parse-time-string'. This excludes very old e-mail addresses.
     The default is "2010-01-01", i.e., only consider e-mail addresses
     used since the start of 2010.

   * `mu4e-compose-complete-ignore-address-regexp' - a regular
     expression to filter out other 'junk' e-mail addresses; defaults
     to noreply.

3.4.4 Queuing mail
------------------

If you cannot send mail directly, for example because you are currently
offline, you can _queue_ the mail, and send it when you have restored
your internet connection. You can control this from the mu4e *note Main
view::.

   To allow for queuing, you need to tell smtpmail where you want to do
this. For example:

     (setq smtpmail-queue-mail  nil  ;; start in non-queuing mode
           smtpmail-queue-dir   "~/Maildir/queue/cur")

   For convenience, we locate the queue directory somewhere in our
normal maildir. If you want to use queued mail, you should create this
directory before starting mu4e. The `mu mkdir' command may be useful
here, so for example:

$ mu mkdir ~/Maildir/queue
$ touch ~/Maildir/queue/.noindex

   The file created by the `touch' command tells mu to ignore this
directory for indexing, which makes sense since it contains smtpmail
meta-data rather than 'normal' messages; see the mu-mkdir and mu-index
man pages for details.

   _Warning_: when you switch on queued-mode, your messages will not
reach their destination until you switch it off again; so, be careful
not to do this accidentally.


File: mu4e.info,  Node: Searching,  Next: Marking,  Prev: Running mu4e,  Up: Top

4 Searching
***********

mu4e is fully search-based; this means that all the lists of messages
you see, are the result of some query. Even if you 'jump to a folder',
in fact you are executing a search query for messages that happen to
have the property of being in a certain folder.

   By default, queries return up to `mu4e-search-results-limit'
(default: 500) results. That's usually more than enough, and helps
performance quite a bit. Sometimes, you may want to show _all_ results;
you can enable this with M-x mu4e-headers-toggle-full-search, or by
customizing the variable `mu4e-headers-full-search'. This applies to
all search commands.

   You can also influence the sort order and whether threads are shown
or not; see *note Sort order and threading::.

* Menu:

* Queries::
* Bookmarks::
* Maildir searches::
* Other search functionality::


File: mu4e.info,  Node: Queries,  Next: Bookmarks,  Up: Searching

4.1 Queries
===========

The queries you can execute are the same ones that `mu find'
understands. Please refer to the `mu-find' and `mu-easy' man pages for
details and more examples.

# get all messages about bananas
bananas

# get all messages about bananas from john with an attachment
from:john flag:attach bananas

# get all messages with subject wombat in June 2009
subject:wombat date:20090601..20090630

# get all messages with PDF attachments in the /projects folder
maildir:/projects mime:application/pdf

# get all important messages which are signed:
flag:signed prio:high

# get all messages from Jim without an attachment:
from:jim AND NOT flag:attach

# get all unread messages where the subject mentions Ångström:
subject:angstrom flag:unread

# get all unread messages between Mar-2002 and Aug-2003 about some bird
date:20020301..20030831 nightingale flag:unread

# get today's messages
date:today..now

# get all messages we got in the last two weeks regarding emacs
date:2w..now emacs

# get mails with a subject soccer, Socrates, society...
# note: the '*' wildcard can only appear as the rightmost character in the term
subject:soc*

# get all mails with attachment with filenames starting with 'pic'
# note: the '*' wildcard can only appear as the rightmost character in the term
file:pic*

# get all messages with PDF attachments:
mime:application/pdf

# get all messages with image attachments:
# note: the '*' wildcard can only appear as the rightmost character in the term
mime:image/*


File: mu4e.info,  Node: Bookmarks,  Next: Maildir searches,  Prev: Queries,  Up: Searching

4.2 Bookmarks
=============

If you have queries that you use often, you may want to store them as
_bookmarks_. These bookmarks then show up in the main view, and you can
invoke them in other places as well. Bookmark searches are available in
the main view *note Main view::, header view *Note Headers view::, and
message view *Note Message view::, using (by default) the key <b>
(`mu4e-search-bookmark').

4.2.1 Setting up bookmarks
--------------------------

`mu4e' provides some default bookmarks, which you can override. The
definition of the default bookmarks is instructive here:

     (defvar mu4e-bookmarks
       '( ("flag:unread AND NOT flag:trashed" "Unread messages"      ?u)
          ("date:today..now"                  "Today's messages"     ?t)
          ("date:7d..now"                     "Last 7 days"          ?w)
          ("mime:image/*"                     "Messages with images" ?p))
       "A list of pre-defined queries; these will show up in the main
     screen. Each of the list elements is a three-element list of the
     form (QUERY DESCRIPTION KEY), where QUERY is a string with a mu
     query, DESCRIPTION is a short description of the query (this will
     show up in the UI), and KEY is a shortcut key for the query.")

   You can replaces these, or add your own items, by putting in your
configuration (`~/.emacs') something like:
     (add-to-list 'mu4e-bookmarks
       '("size:5M..500M"       "Big messages"     ?b))

   This prepends your bookmark to the list, and assigns the key <b> to
it. If you want to _append_ your bookmark, you can use `t' as the third
argument to `add-to-list'.

   In the various mu4e views, pressing <b> will list all the bookmarks
defined in the echo area, with the shortcut key highlighted. So, to
invoke the bookmark we just defined (to get the list of "Big
Messages"), all you need to type is <bb>.

4.2.2 Editing bookmarks before searching
----------------------------------------

There is also `mu4e-headers-search-bookmark-edit-first' (key <B>),
which lets you edit the search query with some bookmark already filled
in. This can be useful if you have many similar queries, but need to
change some parameter. For example, you could have a bookmark "NOT
maildir:/Trash AND"(1) and add whatever you want to search for to that.
Or, to do a query limited to the messages of today, all you need to
type is <Bt> (using the Today's messages-bookmark, see above).

   ---------- Footnotes ----------

   (1) Not a valid search query by itself


File: mu4e.info,  Node: Maildir searches,  Next: Other search functionality,  Prev: Bookmarks,  Up: Searching

4.3 Maildir searches
====================

Maildir searches are quite similar to bookmark searches (see *note
Bookmarks::), with the difference being that the target is always a
maildir - maildir queries provide a 'traditional' folder-like interface
to a search-based e-mail client. By default, maildir searches are
available in the *note Main view::, *note Headers view::, and *note
Message view::, with the key <j> (`mu4e-jump-to-maildir').

4.3.1 Setting up maildir shortcuts
----------------------------------

You can do Maildir searches manually (e.g. with a query like
`maildir:/myfolder') but since it is so common, mu4e offers a quicker
way to do this.

   To enable this, you need to set the variable mu4e-maildir-shortcuts
to list of maildirs you'd like to have quick access to, for example:

        (setq mu4e-maildir-shortcuts
         '( ("/inbox"     . ?i)
            ("/archive"   . ?a)
            ("/lists"     . ?l)
            ("/work"      . ?w)
            ("/sent"      . ?s))

   This would set <i> as a shortcut for the /inbox folder; so
effectively a query maildir:/inbox. There is a special shortcut <o> for
_other_ (so don't use that one for your own shortcuts!), which allows
you to choose from _all_ maildirs. There is support for autocompletion;
note that the list of maildirs is determined when mu4e starts; if there
are changes in the maildirs while mu4e is running, you need to restart
mu4e.

   Each of the folder names is relative to your top-level maildir
directory; so if you keep your mail in `~/Maildir', `/inbox' would
refer to `~/Maildir/inbox'.

   Having these shortcuts allows you to jump around your folder very
quickly - for example, getting to the /lists folder only requires you
to type <jl>.

   The very same shortcuts are used by the `mu4e-mark-for-move' (default
shortcut <m>); so, for example, if you want to move a message the
/archive folder, you can do so by typing <ma>.


File: mu4e.info,  Node: Other search functionality,  Prev: Maildir searches,  Up: Searching

4.4 Other search functionality
==============================

4.4.1 Navigating through search queries
---------------------------------------

You can navigate through previous/next queries using
`mu4e-headers-query-prev' and `mu4e-headers-query-next', which are
bound to <M-left> and <M-right>, just like the way you can navigate to
previous and next pages in many webbrowsers.

   The functions try to be smart as to not record duplicate queries.
Also, the number of queries remembered has a fixed limit, so
long-running mu4e won't use too much memory.

   If you want to forget previous/next queries, you can use
`mu4e-headers-forget-queries'.

4.4.2 Narrowing search results
------------------------------

Sometimes, it is useful to narrow existing search results, i.e., add
some clauses to the current query to match fewer messages.

   As an example of this, suppose you're looking at the some mailing
list, perhaps by jumping to a maildir (`mu4e-headers-jump-to-maildir',
<j>) or because you followed some bookmark
(`mu4e-headers-search-bookmark', <b>). Now, of the messages in that
search, you want to narrow things down to only those messages that have
attachments.

   Now, `mu4e-headers-search-narrow' (</>) comes in handy. That function
asks for an additional search pattern, which will be appended to the
current search query, in effect getting you the subset of the currently
shown headers that also match this extra search pattern.

   Technically, narrowing the results of query x with expression y
implies doing a search (x) AND y.

   Note, messages that were not in your in your original search results
because of `mu4e-search-results-limit', may still show up in the
narrowed query.


File: mu4e.info,  Node: Marking,  Next: Actions,  Prev: Searching,  Up: Top

5 Marking
*********

The common way in mu4e to do things with messages is a two-step process
- first you _mark_ them for a certain action, then you _execute_
(<x>)the marks. This works in a way somewhat similar to dired.

   Marking can happen in both the *note Headers view:: and the *note
Message view::.

* Menu:

* Selecting messages for marking::
* What to mark for::
* Executing the marks::
* Leaving the headers buffer::
* Custom mark functions::
* Some marking examples::


File: mu4e.info,  Node: Selecting messages for marking,  Next: What to mark for,  Up: Marking

5.1 Selecting messages for marking
==================================

There are a couple of ways to select messages for marking:
   * _message at point_: you can put a mark on the message-at-point in
     either the *note Headers view:: or *note Message view::

   * _region_: you can put a mark on all messages in the current region
     (selection) in the *note Headers view::

   * _Pattern_: you can put a mark on all messages in the *note Headers
     view:: matching a certain pattern with `mu4e-headers-mark-pattern'
     (<%>)

   * You can put a mark on all the messages in the thread/subthread at
     point with `mu4e-headers-mark-thread' and
     `mu4e-headers-mark-subthread', respectively


File: mu4e.info,  Node: What to mark for,  Next: Executing the marks,  Prev: Selecting messages for marking,  Up: Marking

5.2 What to mark for
====================

mu4e supports a number of different marks - i.e., different actions to
apply to messages:

| mark for     | keybinding  | description              |
|--------------+-------------+--------------------------|
| trash        | d           | move to the trash folder |
| delete       | D, <delete> | delete                   |
| move         | m           | move to some maildir     |
| flag         | +           | mark as 'flagged'        |
| unflag       | -           | remove 'flagged' mark    |
| read         | r           | mark as read             |
| unread       | o           | marks as unread          |
| deferred     | *           | mark now, decide later   |
| unmark       | u           | remove mark at point     |
| unmark all   | U           | remove all marks         |

   After marking a header for something, the left-most columns shows a
character to remind you what you marked it with. Next to that, mu4e
displays the name of the mark, on top of the beginning of the header
line. This latter display is informative, but if you often mark many
(thousands) messages, this may slow down things significantly(1). For
this reason, you can disable this by setting `mu4e-headers-show-target'
to `nil'.

   deferred is a special kind of mark; you can use it to mark some
messages, and then decide later what mark to use for them. At any time,
you can set the actual mark with `mu4e-mark-resolve-deferred-marks'
(<#>), or mu4e will ask you for it when you execute the marks (<x>).

   ---------- Footnotes ----------

   (1) this uses an emacs feature called _overlays_, which are slow
when used a lot in a buffer


File: mu4e.info,  Node: Executing the marks,  Next: Leaving the headers buffer,  Prev: What to mark for,  Up: Marking

5.3 Executing the marks
=======================

After you have marked some messages, you can execute them with <x>
(`mu4e-mark-execute-all').


File: mu4e.info,  Node: Leaving the headers buffer,  Next: Custom mark functions,  Prev: Executing the marks,  Up: Marking

5.4 Leaving the headers buffer
==============================

When you quit the buffer (for example, but doing a new search) with
marks being present, mu4e asks you what to do with them, depending on
the value of the variable `mu4e-headers-leave-behavior' - see its
documentation.


File: mu4e.info,  Node: Custom mark functions,  Next: Some marking examples,  Prev: Leaving the headers buffer,  Up: Marking

5.5 Custom mark functions
=========================

Sometimes, the built-in functions to mark messages may not be
sufficient for your needs. For this, mu4e offers an easy way to define
your own custom mark functions. You can choose one of the custom marker
functions using <&> in *note Headers view:: and *note Message view::.

   Custom mark functions should be appended to the list
`mu4e-headers-custom-markers'. Each of the elements of this list
('markers') is a list with three (or two) elements:
   * The name of the marker - as short string describing this marker.
     The first character of this string will also be its shortcut, so
     these should be unique.

   * a predicate function taking two arguments msg and param- first,
     msg, which is the message plist (see *note The message
     s-expression::); second is a parameter provided by the third of
     the marker elements (next item). The predicate function should
     return non-nil if the messages matches.

   * (optionally) a function that is evaluated once, and its result is
     passed as a parameter to the predicate function. This is useful to
     ask for user-input.

   So, let's look at an example: suppose we want to match all messages
that have more than _n_ recipients. We could do it like this:

     (add-to-list 'mu4e-headers-custom-markers
       '("More than n recipients"
           (lambda (msg n) (> (+ (length (mu4e-msg-field msg :to))
                                 (length (mu4e-msg-field msg :cc))) n))
           (lambda () (read-number "Match messages with more recipients than: "))) t)

   After evaluating this, pressing <&> should let you choose the custom
marker function, and ask you for the parameters.

   As you can see, it's not very hard to define simple functions to
match messages. There are some more examples in the defaults for
`mu4e-headers-custom-markers'; see `mu4e-headers.el'.


File: mu4e.info,  Node: Some marking examples,  Prev: Custom mark functions,  Up: Marking

5.6 Some marking examples
=========================

Let's look at some examples, assuming the default key-bindings.

   * _Mark the message at point for trashing_: press <d>

   * _Mark all messages in the buffer as unread_: press <C-x h o>

   * _Delete the messages in the current thread_: press <T D>

   * _Mark messages with a subject matching "hello" for flagging_:
     press <% + s hello RET>. Note, the menu system helps you here; all
     you need to remember is <%> for `mu4e-headers-mark-pattern'.


File: mu4e.info,  Node: Actions,  Next: Interaction with other tools,  Prev: Marking,  Up: Top

6 Actions
*********

mu4e allows you to define custom actions for messages in the *note
Headers view:: and for both messages and attachments in the *note
Message view::. Custom actions allow you to easily extend mu4e for
specific needs - for example, marking messages as spam in a spam filter
or applying an attachment with a source code patch.

   You can invoke the actions with <a> for actions on messages, and <A>
for actions on attachments. In the following, we'll gives some examples
of defining actions.

   Note, the format of the actions has changed since version 0.9.8.4,
and you must change your configuration to use the new format; mu4e
warns you when you are using the old format.

   The older format was: `(DESCRIPTION SHORTCUT [VALUE])', while the new
format is a cons-cell, `(DESCRIPTION . VALUE)'; see below for some
examples. If your shortcut is not also the first character of the
description, simply prefix the description with that character.

6.0.1 Functions for actions
---------------------------

Defining a new custom action means that you need to write an
elisp-function to do the work. Functions that operate on messages look
like:
     (defun my-action-func (msg)
      "Describe my func."
     ;; do stuff
     )

   Messages that operate on attachments look like:
     (defun my-attachment-action-func (msg attachment-num)
      "Describe my func."
     ;; do stuff
     )

   After you have defined your function, you can add it to the list of
actions, either `mu4e-headers-actions', `mu4e-view-actions' or
`mu4e-view-attachment-actions'.

   Let's take a at some simple examples.

6.0.2 Example: adding an action in the headers view
---------------------------------------------------

Suppose we would like to inspect the number of recipients for a message
in the *note Headers view::.  We could define the following function in
our configuration:

     (defun show-number-of-recipients (msg)
       "Display the number of recipients for this message."
       (message "Number of recipients: %d"
          (+ (length (mu4e-msg-field msg :to)) (length (mu4e-msg-field msg :cc)))))

     ;; define 'N' (the first letter of the description) as the shortcut
     (add-to-list 'mu4e-headers-actions
        '("Number of recipients" . show-number-of-recipients) t)

   After activating this, <a n> in the headers view will show the
number of recipients for the message at point.

6.0.3 Example: adding an action in the message view
---------------------------------------------------

As another example, suppose we would like to search for messages by the
sender of this message.

     (defun search-for-sender (msg)
       "Search for messages sent by the sender of the current one."
       (mu4e-headers-search (concat "from:" (cdar (mu4e-msg-field msg :from)))))

     ;; define 'x' as the shortcut
     (add-to-list 'mu4e-view-actions
        '("xsearch for sender" . search-for-sender) t)

6.0.4 Example: adding an attachment action
------------------------------------------

Finally, let's define an action for an attachment. As mentioned,
attachment-action function take _2_ arguments, the message and the
attachment number to use.

   The following will count the number of lines in an attachment, and
define <n> as the shortcut key (the 'n' is prefixed to the description).

     (defun count-lines-in-attachment (msg attachnum)
       "Count the number of lines in an attachment."
       (mu4e-view-pipe-attachment msg attachnum "wc -l"))
     (add-to-list 'mu4e-view-attachment-actions
        '("ncount lines" . count-lines-in-attachment) t)

6.0.5 What functions are available?
-----------------------------------

elisp does not have a module-system, so it can be hard to see what
functions are internal, and which are usable for others as well.

   To help a bit with this, all functions and variables in mu4e marked
for _internal_ use have the prefix mu4e~, while all the public ones use
mu4e-. The ~ was chosen because its ascii-code is after all the
letters, so they will only appear at the end of completion buffers and
the like.

   Functions that start with mu4e-view- and mu4e-headers- should be
called only from that particular context (the message view and the
headers view, respectively).

6.0.6 Example actions
---------------------

mu4e includes a number of example actions in `mu4e-actions.el' in the
source distribution (see <C-h f mu4e-action-TAB>). For example, for
viewing messages in an external web browser, or listening to a message's
body-text using text-to-speech.

   If you have come up with any interesting actions that may be useful
for others, you are invited to contribute those.


File: mu4e.info,  Node: Interaction with other tools,  Next: Example configuration,  Prev: Actions,  Up: Top

7 Interaction with other tools
******************************

In this chapter we discuss some ways in ways in which mu4e can cooperate
with other tools.

* Menu:

* Setting the default emacs mail program::
* Creating org-mode links::
* Rich-text messages with org-mode::
* Maintaining an address-book with org-contacts::
* Getting new mail notifications with Sauron::
* Speedbar support::
* Citations with mu-cite::
* Attaching files with dired::


File: mu4e.info,  Node: Setting the default emacs mail program,  Next: Creating org-mode links,  Up: Interaction with other tools

7.1 Setting the default emacs mail program
==========================================

emacs allows you to select an e-mail program as the default program it
will use when you press <C-x m> (`compose-mail'), call
`report-emacs-bug' and so on.

   If you want to use mu4e for this, you do so by adding the following
to your configuration:

     (setq mail-user-agent 'mu4e-user-agent)

   At the present time, support is still experimental.


File: mu4e.info,  Node: Creating org-mode links,  Next: Rich-text messages with org-mode,  Prev: Setting the default emacs mail program,  Up: Interaction with other tools

7.2 Creating org-mode links
===========================

It can be useful to include links to e-mail messages or even search
queries in your org-mode files. mu4e supports this with the org-mu4e
module; you can set it up by adding it to your configuration:

     (require 'org-mu4e)

   After this, you can use the normal org-mode mechanisms to store
links: M-x org-store-link will store a link to a particular message
when you're in *note Message view::, and a link to a query when you are
in *note Headers view::.

   You can insert these link later with M-x org-insert-link. Then, you
can go to the query or message the link points to with either M-x
org-agenda-open-link in agenda buffers, or M-x org-open-at-point
elsewhere - both are typically bound to `C-c C-o'.


File: mu4e.info,  Node: Rich-text messages with org-mode,  Next: Maintaining an address-book with org-contacts,  Prev: Creating org-mode links,  Up: Interaction with other tools

7.3 Rich-text messages with org-mode (EXPERIMENTAL)
===================================================

org-mode has some nice facilities for editing texts - creating lists,
tables, mathematical formulae etc. In addition, it can convert them to
HTML.

   An _experimental_ mu4e feature lets you edit your messages with
org-mode, and (optionally) convert them on the fly (when sending them)
to messages with an HTML-part containing the rich-text version of your
messages.

   To enable all this, make sure you have
     (require 'org-mu4e)
   somewhere in your setup, and also make sure that the dvipng program
is available in your path.

   Then, when composing a message, you can use `M-x
org-mu4e-compose-org-mode' to enable this mode, or, alternatively, put
in the mode-hook for mu4e-compose-mode.

   org-mu4e-compose-org-mode behaves more or less like a minor-mode.
When it is active, editing the message body takes place in org-mode,
while editing the headers uses the normal message editing mode,
mu4e-compose-mode.

   Now, if you want to automatically convert the org-mode markup to
rich-text when sending messages, you need to set the variable
`org-mu4e-convert-to-html' to non-nil:

     (setq org-mu4e-convert-to-html t)

   To send the message or execute other mu4e-compose-mode/message-mode
commands on the message, first press <M-m>. Thus, for example, to send
the message, you'd press <M-m C-c>.

   The code for doing the conversion is based on Eric Schultze's
org-mime(1), but has been customized for use with mu4e. In particular,
the mode-switching between org-mode and mu4e-compose-mode is
mu4e-specific.

   ---------- Footnotes ----------

   (1) `http://orgmode.org/worg/org-contrib/org-mime.php'


File: mu4e.info,  Node: Maintaining an address-book with org-contacts,  Next: Getting new mail notifications with Sauron,  Prev: Rich-text messages with org-mode,  Up: Interaction with other tools

7.4 Maintaining an address-book with org-contacts
=================================================

Note, mu4e supports built-in address autocompletion; *note Address
autocompletion::, and that is the recommended way to do this.

   However, it is also possible to manage your addresses with org-mode,
using org-contacts(1).

   mu4e-actions defines a useful action (*note Actions::) for this to
add a contact based on the From:-address in the current mail (current
header or view). To enable this, add to your configuration something
like:

     (setq mu4e-org-contacts-file  <full-path-to-your-org-contacts-file>)
     (add-to-list 'mu4e-headers-actions
       '("org-contact-add" . mu4e-action-add-org-contact) t)
     (add-to-list 'mu4e-view-actions
       '("org-contact-add" . mu4e-action-add-org-contact) t)

   After this, you should be able to add contacts using <a o> in the
headers view and the message view, using the org-capture mechanism.
Note, the <o> is because of the first character of org-contact-add.

   ---------- Footnotes ----------

   (1) `http://julien.danjou.info/software/org-contacts.el'


File: mu4e.info,  Node: Getting new mail notifications with Sauron,  Next: Speedbar support,  Prev: Maintaining an address-book with org-contacts,  Up: Interaction with other tools

7.5 Getting new mail notifications with Sauron
==============================================

The emacs-package Sauron(1) (by the same author) can be used to get
notifications about new mails.

   If you put something like the below script in your crontab (or have
some other way of having it execute every _n_ minutes, you will receive
notifications in the sauron-buffer when new messages arrive.

#!/bin/sh
# put the path to your Inbox folder here

CHECKDIR="/home/$LOGNAME/Maildir/Inbox"
sauron-msg () {
    DBUS_COOKIE="/home/$LOGNAME/.sauron-dbus"
    if test "x$DBUS_SESSION_BUS_ADDRESS" = "x"; then
        if test -e $DBUS_COOKIE; then
                export DBUS_SESSION_BUS_ADDRESS="`cat $DBUS_COOKIE`"
        fi
    fi
    if test -n "x$DBUS_SESSION_BUS_ADDRESS"; then
        dbus-send --session                          \
            --dest="org.gnu.Emacs"                   \
            --type=method_call                       \
            "/org/gnu/Emacs/Sauron"                  \
            "org.gnu.Emacs.Sauron.AddMsgEvent"       \
            string:shell uint32:3 string:"$1"
    fi
}

for f in `find $CHECKDIR -mmin -2 -a -type f`; do
        subject=`$MU view $f | grep '^Subject:' | sed 's/^Subject://'`
        sauron-msg "mail: $subject"
done

   Note, you should put something like:
     (setq sauron-dbus-cookie t)
   in your setup, which allows the script to find the D-Bus session bus.

   ---------- Footnotes ----------

   (1) Sauron can be found at `https://github.com/djcb/sauron', or in
the Marmalade package-repository at `http://http://marmalade-repo.org/'


File: mu4e.info,  Node: Speedbar support,  Next: Citations with mu-cite,  Prev: Getting new mail notifications with Sauron,  Up: Interaction with other tools

7.6 Speedbar support
====================

`speedbar' is an emacs-extension that shows navigational information for
an emacs buffer in a separate frame. Using `mu4e-speedbar', mu4e lists
your bookmarks and maildir folders and allows for one-click access to
them.

   mu4e loads mu4e-speedbar automatically; all you need to do to
activate it is `M-x speedbar'. Then, when then going to the *note Main
view::, the speedbar-frame will be updated with your bookmarks and
maildirs. For speed reasons, the list of maildirs is determined when
mu4e starts; if the list of maildirs changes while mu4e is running, you
need to restart mu4e to reflect those changes in the speedbar and in
other places that use this list, such as auto-completion when jumping
to a maildir.

   `mu4e-speedbar' was contributed by Antono Vasiljev.


File: mu4e.info,  Node: Citations with mu-cite,  Next: Attaching files with dired,  Prev: Speedbar support,  Up: Interaction with other tools

7.7 Citations with mu-cite
==========================

Note, apart from its name mu-cite is a project totally unconnected to
mu/mu4e.

   mu-cite is a package to control the way message citations look like
(i.e., the message you responded to when you reply to them or forward
them), with its latest version available at
`http://www.jpl.org/elips/mu/'.

   After installation of the mu-cite, you can use something like the
following to make it work with mu4e:

     (require 'mu-cite)
     (setq message-cite-function 'mu-cite-original)
     (setq mu-cite-top-format
         '("On " date ", " full-name " wrote:\n\n"))
     (setq mu-cite-prefix-format '(" > ")))


File: mu4e.info,  Node: Attaching files with dired,  Prev: Citations with mu-cite,  Up: Interaction with other tools

7.8 Attaching files with dired
==============================

It's possible to attach files to mu4e messages, using the following
steps (based on a post on the mu-discuss mailing list by Stephen Eglen).

   To prepare for this, you need a special version of the
`gnus-dired-mail-buffers' function so it understands mu4e buffers as
well; so put in your configuration:

     (require 'gnus-dired)
     ;; make the `gnus-dired-mail-buffers' function also work on message-mode derived
     ;; modes, such as mu4e-compose-mode
     (defun gnus-dired-mail-buffers ()
       "Return a list of active message buffers."
       (let (buffers)
         (save-current-buffer
           (dolist (buffer (buffer-list t))
     	(set-buffer buffer)
     	(when (and (derived-mode-p 'message-mode)
     		(null message-sent-message-via))
     	  (push (buffer-name buffer) buffers))))
         (nreverse buffers)))

     (setq gnus-dired-mail-mode 'mu4e-user-agent)
     (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)

   Then, mark the file(s) in dired you would like to attach and press
C-c RET C-a, and you'll be asked whether to attach them to an existing
message, or create a new one.


File: mu4e.info,  Node: Example configuration,  Next: FAQ - Frequently Anticipated Questions,  Prev: Interaction with other tools,  Up: Top

8 Example configuration
***********************

In this chapter, we show some example configurations.

* Menu:

* Minimal configuration::
* Longer configuration::
* Gmail configuration::


File: mu4e.info,  Node: Minimal configuration,  Next: Longer configuration,  Up: Example configuration

8.1 Minimal configuration
=========================

An (almost) minimal configuration for mu4e might look something like
this:

     ;; example configuration for mu-for-emacs (mu4e)
     (require 'mu4e)

     ;; happily, below settings are all /optional/

     ;; Only needed if your maildir is _not_ ~/Maildir
     ;;(setq mu4e-maildir "/home/user/Maildir")

     ;; these must start with a "/", and must exist
     ;; (i.e.. /home/user/Maildir/sent must exist)
     ;; you use e.g. 'mu mkdir' to make the Maildirs if they don't
     ;; already exist

     ;; below are the defaults; if they do not exist yet, mu4e will offer to
     ;; create them
     ;; (setq mu4e-sent-folder   "/sent")
     ;; (setq mu4e-drafts-folder "/drafts")
     ;; (setq mu4e-trash-folder  "/trash")

     ;; for the settings for outgoing mail consult the section 'Longer configuration'


File: mu4e.info,  Node: Longer configuration,  Next: Gmail configuration,  Prev: Minimal configuration,  Up: Example configuration

8.2 Longer configuration
========================

     ;; example configuration for mu-for-emacs (mu4e)
     (require 'mu4e)

     (setq
        ;; a regular expression that matches all email address uses by the user;
        ;; this allows us to correctly determine if user is the sender of some message
        mu4e-user-mail-address-regexp
           "foo@bar\.com\\|cuux@example\.com"

        ;; path to our Maildir directory
        mu4e-maildir       "/home/user/Maildir"
        ;; the next are relative to `mu4e-maildir'
        mu4e-sent-folder   "/sent"
        mu4e-drafts-folder "/drafts"
        mu4e-trash-folder  "/trash"

        ;; the maildirs you use frequently; access them with 'j' ('jump')
        mu4e-maildir-shortcuts
         '( ("/archive"     . ?a)
            ("/inbox"       . ?i)
            ("/work"        . ?w)
            ("/sent"        . ?s))

        ;; when you want to use some external command for text->html conversion,
        ;; i.e., the 'html2text' program
        mu4e-html2text-command "html2text"

        ;; the headers to show in the headers list -- a pair of the field + its
        ;; width, with `nil' meaning 'unlimited' (better only use that for
        ;; the last field. These are the defaults:
        mu4e-headers-fields
         '( (:date          .  25)
            (:flags         .   6)
            (:from          .  22)
            (:subject       .  nil))

        ;; program to get mail; alternatives are 'fetchmail', 'getmail'
        ;; isync or your own shellscript. called when 'U' is pressed in
        ;; main view
        mu4e-get-mail-command "offlineimap"

        ;; general emacs mail settings; used when composing e-mail
        mu4e-reply-to-address "foo@bar.com"
        user-mail-address "foo@bar.com"
        user-full-name  "Foo X. Bar"

        ;; include in message with C-c C-w
        message-signature
         (concat
           "Foo X. Bar\n"
           "http://www.example.com\n")

        ;; smtp mail setting
        message-send-mail-function 'smtpmail-send-it
        smtpmail-default-smtp-server "smtp.example.com"
        smtpmail-smtp-server ""smtp.example.com"
        smtpmail-local-domain "example.com"

        ;; if you need offline mode, set these -- and create the queue dir
        ;; with 'mu mkdir', i.e.. mu mkdir /home/user/Maildir/queue
        smtpmail-queue-mail  nil
        smtpmail-queue-dir  "/home/user/Maildir/queue/cur")

        ;; don't keep message buffers around
        (setq message-kill-buffer-on-exit t)


File: mu4e.info,  Node: Gmail configuration,  Prev: Longer configuration,  Up: Example configuration

8.3 Gmail configuration
=======================

_Gmail_ is a popular e-mail provider; let's see how we can make it work
with mu4e.

   First of all, we need a program to get the e-mail from Gmail to our
local machine; for this we use offlineimap; on Debian (and derivatives
like Ubuntu), this is as easy as:
sudo apt-get install offlineimap

   Then, we need to create a configuration for offlineimap, i.e. a file
`~/.offlineimaprc':

[general]
accounts = Gmail
maxsyncaccounts = 3

[Account Gmail]
localrepository = Local
remoterepository = Remote

[Repository Local]
type = Maildir
localfolders = ~/Maildir

[Repository Remote]
type = IMAP
remotehost = imap.gmail.com
remoteuser = USERNAME@gmail.com
remotepass = PASSWORD
ssl = yes
maxconnections = 1
realdelete = no

   Obviously, you need to replace USERNAME and PASSWORD with your actual
Gmail username and password.

   After this, you should be able to download your mail:
$ offlineimap
 OfflineIMAP 6.3.4
Copyright 2002-2011 John Goerzen & contributors.
Licensed under the GNU GPL v2+ (v2 or any later version).

Account sync Gmail:
 ***** Processing account Gmail
 Copying folder structure from IMAP to Maildir
 Establishing connection to imap.gmail.com:993.
Folder sync [Gmail]:
 Syncing INBOX: IMAP -> Maildir
 Syncing [Gmail]/All Mail: IMAP -> Maildir
 Syncing [Gmail]/Drafts: IMAP -> Maildir
 Syncing [Gmail]/Sent Mail: IMAP -> Maildir
 Syncing [Gmail]/Spam: IMAP -> Maildir
 Syncing [Gmail]/Starred: IMAP -> Maildir
 Syncing [Gmail]/Trash: IMAP -> Maildir
Account sync Gmail:
 ***** Finished processing account Gmail

   We can now run mu to make sure things work:

$ mu index
mu: indexing messages under /home/foo/Maildir [/home/foo/.mu/xapian]
| processing mail; processed: 520; updated/new: 520, cleaned-up: 0
mu: elapsed: 3 second(s), ~ 173 msg/s
mu: cleaning up messages [/home/foo/.mu/xapian]
/ processing mail; processed: 520; updated/new: 0, cleaned-up: 0
mu: elapsed: 0 second(s)

   Note that we can run both the offlineimap and the mu index from
within mu4e, but running it from the command line makes it a bit easier
to see what is going on.

   Now, let's make a mu4e configuration for this:

     (require 'mu4e)

     ;; default
     ;; (setq mu4e-maildir (expand-file-name "~/Maildir"))

     (setq mu4e-drafts-folder "/[Gmail].Drafts")
     (setq mu4e-sent-folder   "/[Gmail].Sent Mail")
     (setq mu4e-trash-folder  "/[Gmail].Trash")

     ;; don't save message to Sent Messages, Gmail/IMAP will take care of this
     (setq mu4e-sent-messages-behavior 'delete)

     ;; setup some handy shortcuts
     (setq mu4e-maildir-shortcuts
         '( ("/INBOX"               . ?i)
            ("/[Gmail].Sent Mail"   . ?s)
            ("/[Gmail].Trash"       . ?t)
            ("/[Gmail].All Mail"    . ?a)))

     ;; allow for updating mail using 'U' in the main view:
     (setq mu4e-get-mail-command "offlineimap")

     ;; something about ourselves
     (setq
        user-mail-address "USERNAME@gmail.com"
        user-full-name  "Foo X. Bar"
        message-signature
         (concat
           "Foo X. Bar\n"
           "http://www.example.com\n"))

     ;; sending mail -- replace USERNAME with your gmail username
     ;; also, make sure the gnutls command line utils are installed
     ;; package 'gnutls-bin' in Debian/Ubuntu

     (require 'smtpmail)
     (setq message-send-mail-function 'smtpmail-send-it
           starttls-use-gnutls t
           smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
           smtpmail-auth-credentials '(("smtp.gmail.com" 587 "USERNAME@gmail.com" nil))
           smtpmail-default-smtp-server "smtp.gmail.com"
           smtpmail-smtp-server "smtp.gmail.com"
           smtpmail-smtp-service 587)

     ;; don't keep message buffers around
     (setq message-kill-buffer-on-exit t)

   And that's it - put the above in your `~/.emacs' (obviously you need
to change USERNAME etc. to your own), and restart emacs, and run `M-x
mu4e'.

   Using these settings, you can quickly switch to your Inbox - press
`ji'. Then, when you want archive some messages, move them to the 'All
Mail' folder by pressing `ma'.


File: mu4e.info,  Node: FAQ - Frequently Anticipated Questions,  Next: Known issues / missing features,  Prev: Example configuration,  Up: Top

9 FAQ - Frequently Anticipated Questions
****************************************

In this chapter we list a number of actual and anticipated questions
and their answers.

   * _How can I quickly delete/move/trash a lot of messages?_ You can
     select ('mark' in emacs-speak) the messages like you would select
     text in a buffer; the actions you then take (e.g., <DEL> for
     delete, <m> for move and <t> for trash) will apply to _all_
     selected messages. You can also use functions like
     `mu4e-headers-mark-thread' (<T>), `mu4e-headers-mark-subthread'
     (<t>) to mark whole threads at the same time, and
     `mu4e-headers-mark-pattern' (<%>) to mark all messages matching a
     certain regular expression.

   * _How can I use BBDB?_ Currently, there is no built-in for address
     management with BBDB; instead, we recommend using mu4e's built-in
     *note Address autocompletion::.

   * _mu4e seems to return a mere subset of all matches - how can I get
     all?_. Indeed, for speed reasons (and because, if you are like the
     author, you usually don't need thousands of matches), mu4e returns
     only up to the value of the variable `m4ue-search-result-limit'
     matches. To show _all_ results, use M-x
     mu4e-headers-toggle-full-search, or customize the variable
     `mu4e-headers-full-search'. This applies to all search commands.

   * _How can I show attached images in my message view buffers?_ See
     *note Viewing images inline::.

   * _How can I easily include attachments in the messages I write?_
     You can drag-and-drop from your desktop; alternatively, you can
     use dired - see *note Attaching files with dired::.

   * _mu4e seems to remove myself from the Cc: list; how can I prevent
     that?_ Set `mu4e-compose-keep-self-cc' to t in your configuration.

   * _When I try to run mu index while mu4e is running I get errors
     like mu: mu_store_new_writable: xapian error 'Unable to get write
     lock on ~/.mu/xapian: already locked'. What can I do about this?_
     You get this error because the underlying Xapian database allows
     itself to be opened in read-write mode only once. There is not
     much mu4e can do about this, but what you can do is telling mu to
     (gracefully) terminate:

        pkill -2 -u $UID mu # send SIGINT
        sleep 1
        mu index

     mu4e will automatically restart mu when it needs it. In practice,
     this seems to work quite well.

   * _Can I automatically apply the marks on messages when leaving the
     headers buffer?_ Yes you can - see the documentation on
     mu4e-headers-leave-behavior.

   * _How can I automatically apply word-wrapping (and hiding cited
     parts) when viewing a message?_ See the documentation on
     mu4e-view-wrap-lines (and mu4e-view-hide-cited). You can always
     toggle between the two states with <w> and <h>, respectively.

   * _Is there context-sensitive help available?_ Yes - pressing <H>
     should take you to the right place in this manual.

   * _How can I set mu4e as the default e-mail client in emacs?_ See
     *note Setting the default emacs mail program::.

   * _How can I perform custom actions on messages and attachments?_ See
     *note Actions::.


File: mu4e.info,  Node: Known issues / missing features,  Next: How it works,  Prev: FAQ - Frequently Anticipated Questions,  Up: Top

10 Known issues / missing features
**********************************

In this chapter we list a number of known issue and/or missing features
in mu4e. Thus, users won't have to search in vain for things that are
not there (yet), and the author can use it as a todo-list.

   * _mu4e does not work well if the emacs language environment is not
     utf-8_; so, if you problems with encodings, be sure to have
     `(set-language-environment "UTF-8")' in your `.emacs'.

   * _Thread handling is incomplete._ While threads are calculated and
     are visible in the headers buffer, you can not collapse/open them.

   * _No support for crypto when reading mail_. Currently, you cannot
     conveniently read encrypted mail or check signatures. For outgoing
     messages, it should work though, using the built-in mechanisms.

   * _The key-bindings are _somewhat_ hard-coded_ That is, the main
     menu assumes the default key-bindings, as do the
     clicks-on-bookmarks.


File: mu4e.info,  Node: How it works,  Next: Logging and debugging,  Prev: Known issues / missing features,  Up: Top

Appendix A How it works
***********************

While not necessarily interesting for all users of mu4e, for some it may
be interesting to know how mu4e does its job.

* Menu:

* High-level overview::
* mu server::
* The message s-expression::
* Reading from the server::


File: mu4e.info,  Node: High-level overview,  Next: mu server,  Up: How it works

A.1 High-level overview
=======================

On a high level, we can summarize the structure of the mu4e system using
some ascii-art:

                   +---------+
                   | emacs   |
                   |    +------+
                   +----| mu4e | --> send mail (smtpmail)
                        +------+
                         |  A
                         V  |  ---/ search, view, move mail
                   +---------+    \
                   |   mu    |
                   +---------+
                     |    A
                     V    |
                   +---------+
                   | Maildir |  <--- receive mail (fetchmail,
                   +---------+                     offlineimap, ...)

   In words:
   * Your e-mail messages are stored in a Maildir-directory (typically,
     `~/Maildir'), and new mail comes in using tools like fetchmail,
     offlineimap, or through a local mail servers (such as qmail or
     Postfix).

   * mu indexes these messages periodically, so you can quickly  search
     for them. mu can run in a special server-mode, where it  provides
     services to client software.

   * mu4e, which runs inside emacs is such a client; it communicates
     with mu (in its server-mode to search for messages, and manipulate
     them.

   * mu4e uses the facilities offered by emacs (the  Gnus message
     editor and smtpmail) to send messages.



File: mu4e.info,  Node: mu server,  Next: The message s-expression,  Prev: High-level overview,  Up: How it works

A.2 mu server
=============

mu4e is based on the mu e-mail searching/indexer. The latter is a
C-program; there are different ways to communicate with a client that is
emacs-based.

   One way to implement this, would be to call the mu command-line tool
with some parameters and then parse the output. In fact, that is how
some tools do it, and it was the first approach - mu4e would invoke
e.g., mu find and process the output in emacs.

   However, with approach, we need to load the entire e-mail _Xapian_
database (in which the message is stored) for each invocation. Wouldn't
it be nicer to keep a running mu instance around?  Indeed, it would -
and thus, the mu server sub-command was born. Running mu server, you
get a sort-of shell, in which you can give commands to mu, which will
then spit out the results/errors. mu server is not meant for humans,
but it can be used manually, which is great for debugging.


File: mu4e.info,  Node: Reading from the server,  Prev: The message s-expression,  Up: How it works

A.3 Reading from the server
===========================

In the design, the next question was what format mu should use for its
output for mu4e (emacs) to process. Some other programs use JSON here,
but it seemed easier (and possibly, more efficient) just to talk to
emacs in its native language: _s-expressions_ (to be precise:
_plists_), and interpret those using the emacs-function
`read-from-string'. See *note The message s-expression:: for details on
the format.

   So, now let's look how we process the data from mu server in emacs.
We'll leave out a lot of detail, mu4e-specifics, and look at a bit more
generic approach.

   The first thing to do is to create a process (for example, with
`start-process'), and then register a filter function for it, which will
be invoked whenever the process has some data for us. Something like:

       (let ((proc (start-process <arguments>)))
         (set-process-filter proc 'my-process-filter)
         (set-process-sentinel proc 'my-process-sentinel))

   Note, the process sentinel is invoked when the process is terminated
- so there you can clean things up.

   The function =my-process-filter= is a user-defined function that
takes the process and the chunk of output as arguments; in mu4e it
looks something like (pseudo-lisp):

     (defun my-process-filter (proc str)
       ;; mu4e-buf: a global string variable to which data gets appended
       ;; as we receive it
       (setq mu4e-buf (concat mu4e-buf str))
       (when <we-have-received-a-full-expression>
           <eat-expression-from mu4e-buf>
           <evaluate-expression>))

   `<evaluate-expression>' de-multiplexes the s-expression we got. For
example, if the s-expression looks like an e-mail message header, it
will be processed by the header-handling function, which will append it
to the header list. If the s-expression looks like an error message, it
will be reported to the user. And so on.

   The language between frontend and backend is documented in the
mu-server man-page. mu4e can log these communications; you can use `M-x
mu4e-toggle-logging' to turn logging on and off, and you can view the
log using `M-x mu4e-show-log'.


File: mu4e.info,  Node: The message s-expression,  Next: Reading from the server,  Prev: mu server,  Up: How it works

A.4 The message s-expression
============================

A typical message s-expression looks something like the following:

     (:docid 32461
      :from (("Nikola Tesla" . "niko@example.com"))
      :to (("Thomas Edison" . "tom@example.com"))
      :cc (("Rupert The Monkey" . "rupert@example.com"))
      :subject "RE: what about the 50K?"
      :date (20369 17624 0)
      :size 4337
      :message-id "6BDC23465F79238C8233AB82D81EE81AF0114E4E74@123213.mail.example.com"
      :path  "/home/tom/Maildir/INBOX/cur/133443243973_1.10027.atlas:2,S"
      :maildir "/INBOX"
      :priority normal
      :flags (seen)
      :parts ( (:index 1 :mime-type "text/plain" :size 12345 :attachment nil)
               (:index 2 :name "photo.jpg" :mime-type "image/jpeg" :size 147331 :attachment t)
               (:index 3 :name "book.pdf" :mime-type "application/pdf" :size 192220 :attachment t))
      :references  ("6BDC23465F79238C8384574032D81EE81AF0114E4E74@123213.mail.example.com"
      "6BDC23465F79238203498230942D81EE81AF0114E4E74@123213.mail.example.com")
      :in-reply-to "6BDC23465F79238203498230942D81EE81AF0114E4E74@123213.mail.example.com"
      :body-txt "Hi Tom,
      ....
     "))

   This s-expression forms a property list (plist), and we can get
values from it using plist-get; for example `(plist-get msg :subject)'
would get you the message subject. However, it's better to use the
function `mu4e-msg-field' to shield you from some of the implementation
details that are subject to change.

   Some notes on the format:
   * The address fields are _lists_ of pairs `(name . email)', where
     name can be nil.

   * The date is in format emacs uses (for example in
     `current-time').(1)

   * Attachments are a list of elements with fields :index (the number
     of the MIME-part), :name (the file name, if any), :mime-type (the
     MIME-type, if any) and :size (the size in bytes, if any).

   * Messages in the *note Headers view:: come from the database and do
     not have :attachments. :body-txt or :body-html fields. Message in
     the *note Message view:: use the actual message file, and do
     include these fields.

A.4.1 Example: ping-pong
------------------------

As an example of this, let's look at the ping-pong-sequence. When mu4e
starts, it sends a command ping to the the mu server backend, to learn
about its version. mu server then responds with a pong s-expression to
provide this information (this is implemented in `mu-cmd-server.c').

   We start this sequence when mu4e is invoked (when the program is
started). It call mu4e-proc-ping, and registers a (lambda) function for
mu4e-proc-pong-func, so it will retrieve the response.

-> ping
<- (pong "mu" :version "x.x.x" :doccount 10000)

   When we receive such a pong (in `mu4e-proc.el'), the lambda function
we registered will be called, and it check the version we got from the
pong with the version we expected, and raises an error, if they differ.

   ---------- Footnotes ----------

   (1) Emacs 32-bit integers have only 29 bits available for the actual
number; the other bits are use by emacs for internal purposes.
Therefore, we need to split time_t in two numbers.


File: mu4e.info,  Node: Logging and debugging,  Next: GNU Free Documentation License,  Prev: How it works,  Up: Top

Appendix B Logging and debugging
********************************

As explained in *note How it works::, mu4e communicates with its backend
(mu server) by sending commands and receiving responses (s-expressions).

   For debugging purposes, it can be very useful to see this data. For
this reason, mu4e can log all these messages. Note that the 'protocol'
is documented to some extent in the mu-server manpage.

   You can enable (and disable) logging with M-x mu4e-toggle-logging.
The log-buffer is called *mu4e-log*, and in the *note Main view::,
*note Headers view:: and Message view, there's a keybinding <$> that
will take you there. You can quit it by pressing <q>.

   Logging can be a bit resource-intensive, so you may not want to
leave it on all the time. By default, the log only maintains the most
recent 1200 lines.

   Note, mu itself keeps a log as well, you can find this it in
<MUHOME>/log/mu.log, typically ~/.mu/log/mu.log.


File: mu4e.info,  Node: GNU Free Documentation License,  Prev: Logging and debugging,  Up: Top

Appendix C GNU Free Documentation License
*****************************************

                      Version 1.2, November 2002

     Copyright (C) 2000,2001,2002 Free Software Foundation, Inc.
     51 Franklin St, Fifth Floor, Boston, MA  02110-1301, USA

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided for under this License.  Any other
     attempt to copy, modify, sublicense or distribute the Document is
     void, and will automatically terminate your rights under this
     License.  However, parties who have received copies, or rights,
     from you under this License will not have their licenses
     terminated so long as such parties remain in full compliance.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.2
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.



Tag Table:
Node: Top638
Node: Introduction2646
Node: Why another e-mail client?2871
Node: Other mail clients3786
Ref: Other mail clients-Footnote-14561
Ref: Other mail clients-Footnote-24594
Ref: Other mail clients-Footnote-34637
Ref: Other mail clients-Footnote-44673
Ref: Other mail clients-Footnote-54709
Node: What mu4e does not do4740
Ref: What mu4e does not do-Footnote-15657
Ref: What mu4e does not do-Footnote-25691
Ref: What mu4e does not do-Footnote-35731
Node: Getting started5768
Node: Installation6289
Ref: Installation-Footnote-18337
Ref: Installation-Footnote-28391
Node: Getting mail8497
Node: Indexing your messages9993
Ref: Indexing your messages-Footnote-111463
Node: Basic configuration11580
Node: Folders11981
Node: Sending mail12688
Node: Running mu4e14554
Node: Main view16319
Node: Headers view19162
Ref: Marking messages23315
Ref: Sort order and threading24361
Ref: Headers view-Footnote-127838
Ref: Headers view-Footnote-227941
Node: Message view27989
Ref: Viewing images inline32828
Ref: Message view-Footnote-136133
Ref: Message view-Footnote-236352
Ref: Message view-Footnote-336400
Node: Editor view36442
Ref: Address autocompletion38225
Ref: Queuing mail40257
Node: Searching41385
Node: Queries42321
Node: Bookmarks43905
Ref: Bookmarks-Footnote-146470
Node: Maildir searches46513
Node: Other search functionality48558
Node: Marking50359
Node: Selecting messages for marking50919
Node: What to mark for51721
Ref: What to mark for-Footnote-153420
Node: Executing the marks53517
Node: Leaving the headers buffer53782
Node: Custom mark functions54191
Node: Some marking examples56223
Node: Actions56828
Node: Interaction with other tools61582
Node: Setting the default emacs mail program62143
Node: Creating org-mode links62717
Node: Rich-text messages with org-mode63661
Ref: Rich-text messages with org-mode-Footnote-165505
Node: Maintaining an address-book with org-contacts65564
Ref: Maintaining an address-book with org-contacts-Footnote-166823
Node: Getting new mail notifications with Sauron66884
Ref: Getting new mail notifications with Sauron-Footnote-168527
Node: Speedbar support68670
Node: Citations with mu-cite69649
Node: Attaching files with dired70458
Node: Example configuration71759
Node: Minimal configuration72091
Node: Longer configuration73065
Node: Gmail configuration75736
Node: FAQ - Frequently Anticipated Questions79986
Node: Known issues / missing features83365
Node: How it works84477
Node: High-level overview84871
Node: mu server86368
Node: Reading from the server87404
Node: The message s-expression89674
Ref: The message s-expression-Footnote-192791
Node: Logging and debugging92978
Node: GNU Free Documentation License94041

End Tag Table


Local Variables:
coding: utf-8
End:
