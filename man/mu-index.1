.TH MU-INDEX 1 "August 2008" "User Manuals"
.SH NAME 
mu-index \- index the contents of a Maildir or file

.SH SYNOPSIS
.B mu-index [options] [maildir]

.SH DESCRIPTION
.B mu-index
recursively scans a email messages, and stores the information found. This
stored information can then be used for searching emails. Usually, a recursive
set of Maildir folders is scanned for all messages, but also single messages
can be scanned.

.B mu-index
understands Maildirs as defined by Dan Bernstein for qmail. It also
understands recursive Maildirs (Maildirs within Maildirs), and the
VFAT-version of Maildir, as used by Tinymail/Modest.

The first run of 
.B mu-index
can take some time; on the author's 4-year old machine using mu version 0.2,
scanning 10000 messages takes around 92 seconds, or about 110 messages per
second. Fortunately, a full scan has to be done only once, after that it
suffices to index the changes, which goes much faster.

There is ongoing work on optimizing
.B mu-index
; so hopefully future versions will be faster (note that version 0.2 is almost
three times faster than version 0.1).

.B mu-index
stores the information it finds in the mu-directory in two databases:

The first one is
.B mu-sqlite.db-<version>
, which is an SQLite3 database with meta data about the indexed messages. One
can access this database with the
.B sqlite3(1)
command line tool. In the mu-source code, you can find the database schema in
.I index/storage.sql.

The second one is
.B mu-xapian.db-<version>
, which is a Xapian database and contains content data about indexed messages found.

The database schema might change in future versions; however note that the 
.B <version>
refers to the 
.I database version
, which is not necessarily following the
versions of
.B mu
itself.

.B NOTE:
It is probably not a good idea to run multiple instances of 
.B mu-index
that write to the same database at the same time. No data loss should occur,
but one or more of the instance might experience errors due to database locks.

Also, before indexing has completed, searches for messages may fail, even if
they have already been indexed, as some of the esssential database information
will only be written at the end of the indexing.

.SH OPTIONS
(NB: see 
.B CONFIGURATION
as well for using the configuration file)

.B --maildir=, -m
.I <maildir>
set the full path to the maildir; note that you can also specify this path as
a non-option argument to 
.B
mu-index
; if you use both, the non-option argument wins.

.B --quiet|-q
makes 
.B mu-index
not put out any progress info during its indexing. This is not the default, as
running may take quite some time, and might confuse novice users.

.SS General options
.B --home=, -h 
.I <dir>
sets the
.B mu 
home directory; default is 
.I ~/.mu
\. This directory is where the message database
is stored, as well as configuration files and logs.

.B --log-stderr, -s
write logging information to standard error instead of to 
.I <mu-home-directory>/mu-find.log, 
which is the default.

.B --log-append, -a
append to the log file instead of overwriting it for every run, which is the default.

.B --debug, -d 
add a lot of logging for debugging purposes

.SS Performance tuning
Even though the defaults should be fine for most use cases, it is possible to
tune the indexing process.
The following options are
available: 

.B --tune-sqlite-transaction-size=
.B --tune-xapian-transaction-size=
.I <size>
Sets the number of messages that are updated/inserted per transaction, for
sqlite and Xapian. Setting the number higher improves the performance, but
also increases the memory usage very significantly. And of course, in case of
problems, up to
.I<size>
changes will be rolled back (this is very rare though).  For SQLite, the
default is 100 and for Xapian it is 1000. It seems that setting the value
higher does not improve performance very much.

.B --tune-synchronous=
.I <sync>
Determines whether we wait for changes to be written to disk before
continuing; possible values for
.I sync
are 2 (full synchronization), 1 (normal), 0 (no synchronization), with the
latter being the fastest. Default is 0 (no synchronization). In mu's case,
that is safe, as we don't lose any data, even if the indexing operation fails
for some reason.

This option corresponds to
.B PRAGMA synchronous
in
.BR http://www.sqlite.org/pragma.html
Values other that 0,1,2 for
.I sync
are ignored.

.B --tune-temp-store=
.I <store>
Determines where we store temporary data is stored; options are 0 (the default
for SQLite), 1 (file) or 2 (memory). The latter is much faster, but consumes
more memory. The default value (for mu) is 2.

This option corresponds to
.B PRAGMA temp_store
in
.BR http://www.sqlite.org/pragma.html
Values other that 0,1,2 for
.I store
are ignored.

.B --tune-sort-inodes
determines whether we sort the inodes before scanning a directory. When using
an ext3 filesystem with the
.B dir_index
option enabled, this gives significant speedups. It does not seem to affect
other filesystems very much. The parameter takes the values 0 (turn off) or 1
(turn on). It is on by default.

Again, we stress that in most cases, there should be
.B no
reason to use touch these tuning options. However, if you are in a
resource-constrained environment, you could opt for using less memory, at a
considerable speed penalty.

.SH CONFIGURATION
Instead of specifying the options on the command line, you can also specify
them in the
.B mu-conf
configuration file, in the mu home directory (by default,
.B ~/.mu
). The
.B General options
go in the section
.B [mu]
while the
.B mu-index
specific options go under
.B [mu-index].
For example, your configuration file could look something like this:

.nf
[mu]
debug=false

[mu-index]
maildir=~/MyMaildir
.fi

Note that command line arguments take precedence over the configuration file.

.SH MAILDIR SUPPORT
.B mu-index
supports an extended version of
.BR maildir(5)
; in particular, it supports (a) a tree of Maildirs (strictly, the maildir
specification does not allow this, but it is useful and widely supported), and
(b) it supports '!' in addition to ':' as separators in mail filenames, which
some e-mail programs (such as 
.BR modest(1)
and the Maildir module in
.BR python(1)
use to support on VFAT filesystems, which don't allow ':' in filenames.

.B mu-index
ignores messages it cannot read or
.BR stat(2)
; but failure to read or stat will be logged. Files starting with '.' are
ignored, but directories are not. Thus, if there is a message
.B .dotdir/new/mymsg1234
it will be indexed. This allows indexing 
.B Maildir++ 
directories, as used by
.I CourierIMAP
and 
.I Dovecot

.B mu-index
processes messages in
.B cur/
and
.B new/
leaf directories; it will ignore messages in
.B tmp/

Thus,
.B [....]/tmp/msg02
will be ignored, while
.B [....]/new/msg01
won't. 

On the other hand,
.B [....]/tmp/cur/msg03
would not be ignored, while
.B [....]/cur/tmp/msg04
would.

Note: single messages that are added by providing their full pathname to
.B mu-index
will not have their path checked.

.SH ENVIRONMENT
.B mu-index
uses 
.B MAILDIR
to find the user's Maildir if it has not been specified explicitely (in either
configuration file or command line). In that case, if
.B MAILDIR
is not set, 
.B mu-index
will try 
.B $HOME/Maildir
.
.SH BUGS
Please report bugs when you find them:
.BR http://code.google.com/p/mu0/issues/list

.SH AUTHOR
Dirk-Jan C. Binnema <djcb@djcbsoftware.nl>

.SH "SEE ALSO"
.BR mu-find(1),
.BR sqlite3(1),
.BR maildir(5)
